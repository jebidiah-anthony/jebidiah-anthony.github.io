I"h9<h2 id="dr-js-group-test-randomizer-1"><span style="color:red">Dr. J’s Group Test Randomizer #1</span></h2>

<hr />

<h3 id="part-1--challenge-description">PART 1 : CHALLENGE DESCRIPTION</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Dr. J is back with another group test, and he patched his prng so we 
can't predict the next number based on the previous one! Can still 
you help Leaf predict the next output of the prng?

nc shell.2019.nactf.com 31258
</code></pre></div></div>

<hr />

<h3 id="part-2--given-files">PART 2 : GIVEN FILES</h3>

<h4 id="-class-randomizer-1c"><strong>[&gt;]</strong> <a href="./files/class-randomizer-1.c">class-randomizer-1.c</a></h4>

<hr />

<h3 id="part-3--program-flow">PART 3 : PROGRAM FLOW</h3>

<ol>
  <li>A seed is initialized:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">uint64_t</span> <span class="n">seed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">init_seed</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">uint64_t</span> <span class="n">r1</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span> <span class="n">randombytes_random</span><span class="p">();</span>
  <span class="kt">uint64_t</span> <span class="n">r2</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span> <span class="n">randombytes_random</span><span class="p">();</span>
  <span class="n">seed</span> <span class="o">=</span> <span class="p">(</span><span class="n">r1</span> <span class="o">&lt;&lt;</span> <span class="mi">32</span><span class="p">)</span> <span class="o">+</span> <span class="n">r2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p><strong>NOTE(S)</strong>:</p>
    <ol>
      <li>The generated seed has a maximum value of <strong><code class="highlighter-rouge">0xffffffff</code></strong>.</li>
    </ol>
  </li>
  <li>An actions menu is presented to the user:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Welcome to Dr. J's Random Number Generator v2! A vulnerability involving "</span>
<span class="s">"predictability of outputs has been patched. </span><span class="se">\n</span><span class="s">"</span>
<span class="s">"[r] Print a new random number </span><span class="se">\n</span><span class="s">"</span>
<span class="s">"[g] Guess the next four random numbers and receive the flag! </span><span class="se">\n</span><span class="s">"</span>
<span class="s">"[q] Quit </span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span>
</code></pre></div>    </div>
    <ol>
      <li><strong><code class="highlighter-rouge">[r]</code></strong> generates a new random number:
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">uint64_t</span> <span class="nf">nextRand</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Keep the 8 middle digits from 5 to 12 (inclusive) and square.</span>
  <span class="n">seed</span> <span class="o">=</span> <span class="n">getDigits</span><span class="p">(</span><span class="n">seed</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>
  <span class="n">seed</span> <span class="o">*=</span> <span class="n">seed</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">getDigits</span><span class="p">(</span><span class="n">seed</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>        </div>
        <p><strong>NOTE(S)</strong>:</p>
        <ol>
          <li>The <strong>5th</strong> to the <strong>8th</strong> digits from the right of the seed is squared.</li>
          <li>The squared number is now the new seed.</li>
          <li>This time, the “random” number generated is no longer the new seed.
            <ul>
              <li>It is now The 13th to the 16th digits (from the right) or the leading digits of the new seed.</li>
            </ul>
          </li>
        </ol>
      </li>
      <li>
        <p><strong><code class="highlighter-rouge">[g]</code></strong> lets the user guess the next four “random” numbers to get the flag.</p>
      </li>
      <li><strong><code class="highlighter-rouge">[q]</code></strong> lets the user exit the program.</li>
    </ol>
  </li>
</ol>

<hr />

<h3 id="part-4--getting-the-flag">PART 4 : GETTING THE FLAG</h3>

<ol>
  <li>Write a script that approximates the initial middle value used to generate the first number:
    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>
   
<span class="k">def</span> <span class="nf">approximateMiddleValue</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>                  <span class="c1"># In order to generate the next "random" numbers, the seed
</span>    <span class="n">curr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>                               <span class="c1"># used to generate the first number should be known.
</span>    <span class="n">root</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">curr</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span>                    <span class="c1">#
</span>                                                  <span class="c1"># The first number generated is the 13th-16th digits (from 
</span>    <span class="k">return</span> <span class="n">root</span><span class="o">*</span><span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="n">root</span><span class="o">+</span><span class="mi">100</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="mi">4</span><span class="p">)</span>       <span class="c1"># the right) or basically the leading digits of the middle
</span>                                                  <span class="c1"># square value of the initial or current seed.
</span><span class="k">def</span> <span class="nf">getNextRand</span><span class="p">(</span><span class="n">seed</span><span class="p">):</span>                            <span class="c1">#
</span>    <span class="n">mid</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">seed</span><span class="p">)[</span><span class="o">-</span><span class="mi">12</span><span class="p">:</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span>                       <span class="c1"># The initial or seed's middle value used to generate the
</span>    <span class="n">m_s</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">mid</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>                             <span class="c1"># first number could be approximated by taking the square
</span>                                                  <span class="c1"># root of the first number multiplied by a hundred to 
</span>    <span class="k">return</span> <span class="n">m_s</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">m_s</span><span class="p">)[:</span><span class="o">-</span><span class="mi">12</span><span class="p">]</span>                    <span class="c1"># increase its precision then rounding it down. All this
</span>                                                  <span class="c1"># times 10^4 should be quite near the initial seed value.          
</span><span class="n">min_val</span><span class="p">,</span><span class="n">max_val</span> <span class="o">=</span> <span class="n">approximateMiddleValue</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="c1">#
</span>                                                  <span class="c1"># With the limited number of middle values to work with,
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">min_val</span><span class="p">,</span> <span class="n">max_val</span><span class="p">):</span>                 <span class="c1"># bruteforcing the initial seed and generating new numbers
</span>    <span class="n">seed</span> <span class="o">=</span> <span class="n">i</span><span class="o">**</span><span class="mi">2</span>                                   <span class="c1"># should no longer be a problem.  
</span>    <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="n">seed</span><span class="p">)[:</span><span class="o">-</span><span class="mi">12</span><span class="p">]</span> <span class="o">==</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>                <span class="c1">#
</span>        <span class="n">seed</span><span class="p">,</span><span class="n">num</span> <span class="o">=</span> <span class="n">getNextRand</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span>              <span class="c1"># This code requires three succeeding numbers generated to       
</span>        <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span>                        <span class="c1"># make sure that the program returns accurate results.       
</span>            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>                     
                <span class="n">seed</span><span class="p">,</span><span class="n">num</span> <span class="o">=</span> <span class="n">getNextRand</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span>               
                <span class="k">if</span> <span class="n">x</span><span class="o">==</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">num</span><span class="o">!=</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="k">break</span>   
                <span class="k">elif</span> <span class="n">x</span><span class="o">!=</span><span class="mi">0</span><span class="p">:</span> <span class="k">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">x</span><span class="o">==</span><span class="mi">5</span><span class="p">:</span> <span class="k">break</span>   
</code></pre></div>    </div>
  </li>
  <li>Run the PRNG and generate three (3) “random” numbers:
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>nc shell.2019.nactf.com 31258
<span class="go">
  Welcome to Dr. J's Random Number Generator v2! A vulnerability involving predictability of outputs has been patched. 
  [r] Print a new random number 
  [g] Guess the next four random numbers and receive the flag! 
  [q] Quit

</span><span class="gp">$</span><span class="w"> </span><span class="o">&gt;</span> r
<span class="go">  95
</span><span class="gp">$</span><span class="w"> </span><span class="o">&gt;</span> r
<span class="go">  5453
</span><span class="gp">$</span><span class="w"> </span><span class="o">&gt;</span> r
<span class="go">  2112
</span><span class="gp">$</span><span class="w"> </span><span class="o">&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>Run the python script above to generate the next four numbers:
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python3 class-randomizer-1.py 95 5453 2112
<span class="go">  1498
  5923
  50
  123
</span></code></pre></div>    </div>
  </li>
  <li>Go back to the running PRNG and submit the next four numbers generated by te script:
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="o">&gt;</span> g
<span class="go">     
  Guess the next four random numbers for a flag! Dr. Strange sees fourteen million six hundred and five possibilies... and you only guess correctly in one. Good luck!
  Enter your first guess:
</span><span class="gp">$</span><span class="w"> </span><span class="o">&gt;</span> 1498
<span class="go">
  Yeah, yeah, one correct guess is easy.
  Enter your second guess:
</span><span class="gp">$</span><span class="w"> </span><span class="o">&gt;</span> 5923
<span class="go">
  Okay, you're lucky... You won't be able to guess right a third time.
  Enter your third guess:
</span><span class="gp">$</span><span class="w"> </span><span class="o">&gt;</span> 50
<span class="go">
  Wow. I'll admit I'm impressed. This is the final test. 
  Enter your fourth guess:
</span><span class="gp">$</span><span class="w"> </span><span class="o">&gt;</span> 123
<span class="go"> 
  Oh no... we're in the endgame now... Here's your flag:
  nactf{th3_b35t_pr3d1ct0r_0f_fu7ur3_b3h4v10r_15_p4st_b3h4v10r}

</span></code></pre></div>    </div>
  </li>
</ol>

<hr />

<h2 id="flag--nactfth3_b35t_pr3d1ct0r_0f_fu7ur3_b3h4v10r_15_p4st_b3h4v10r">FLAG : <strong>nactf{th3_b35t_pr3d1ct0r_0f_fu7ur3_b3h4v10r_15_p4st_b3h4v10r}</strong></h2>
:ET