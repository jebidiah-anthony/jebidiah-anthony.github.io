I"<h2 id="reversible-sneaky-algorithm-1"><span style="color:red">Reversible Sneaky Algorithm #1</span></h2>

<hr />

<h3 id="part-1--challenge-description">PART 1 : CHALLENGE DESCRIPTION</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Lori decided to implement RSA without any security measures like 
random padding. Must be deterministic then, huh? Silly goose!

She encrypted a message of the form nactf{****} where the redacted 
flag is a string of 4 lowercase alphabetical characters. Can you 
decrypt it?

As in the previous problem, the message is converted to a number by 
converting ascii to hex.
</code></pre></div></div>

<hr />

<h3 id="part-2--given-files">PART 2 : GIVEN FILES</h3>

<h4 id="-reversiblesneakyalgorithmtxt"><strong>[&gt;]</strong> <a href="./files/ReversibleSneakyAlgorithm.txt">ReversibleSneakyAlgorithm.txt</a></h4>

<table>
<tr>
  <td>n</td>
  <td>22211149480575639993429030519324903433947913532364781040868963328192510711356813047019777682976897694523708823502748768149007288902843985412808705624398873301639600888468250478096471710461804856036409585519537946352413960371213677893523940481424813184421465313214067723492301317054407961642320909213358344993453825109139928083868146685834149311590508677641684185974469669019522897333475910002506624356655715375691861599282035176111228787146595035293770294934083506588432931535561733381730924617763450268288785249430304809062568532772866407535937947253602671915278827388538023000320823892308918791287865032550658101647</td>
</tr>
<tr>
  <td>e</td>
  <td>65537</td>
</tr>
<tr>
  <td>c</td>
  <td>17092019895398435490936645877681389522100314381280314137324590582626113380519883878346612680436149571504342956062627199254592419000136198748264157134720216337534802137245374257104787163473593768075381161119603573787923015405105192411372689756878820005036480013443173993126005361536816259899310244534769833694660355126920566669139672444357708161337389888825104348833002955918763849005061351140425567156148202269336347554989169075541289307981444741551677799416273481457219933391047628725337828725080079301570909831609401028488393457876225318163558871115320155827798534306397644894097358075465535794590825299057956641732</td>
</tr>
</table>

<hr />

<h3 id="part-3--getting-the-flag">PART 3 : GETTING THE FLAG</h3>

<p>Since the flag only consists of only 4 lowercase letters, bruteforcing the flag should be done within a reasonable timeframe.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">binascii</span> <span class="kn">import</span> <span class="n">hexlify</span>

<span class="n">cipher</span> <span class="o">=</span> <span class="mi">17092019895398435490936645877681389522100314381280314137324590582626113380519883878346612680436149571504342956062627199254592419000136198748264157134720216337534802137245374257104787163473593768075381161119603573787923015405105192411372689756878820005036480013443173993126005361536816259899310244534769833694660355126920566669139672444357708161337389888825104348833002955918763849005061351140425567156148202269336347554989169075541289307981444741551677799416273481457219933391047628725337828725080079301570909831609401028488393457876225318163558871115320155827798534306397644894097358075465535794590825</span>

<span class="n">n</span> <span class="o">=</span> <span class="mi">22211149480575639993429030519324903433947913532364781040868963328192510711356813047019777682976897694523708823502748768149007288902843985412808705624398873301639600888468250478096471710461804856036409585519537946352413960371213677893523940481424813184421465313214067723492301317054407961642320909213358344993453825109139928083868146685834149311590508677641684185974469669019522897333475910002506624356655715375691861599282035176111228787146595035293770294934083506588432931535561733381730924617763450268288785249430304809062568532772866407535937947253602671915278827388538023000320823892308918791287865032550658101647</span>

<span class="n">e</span> <span class="o">=</span> <span class="mi">65537</span>

<span class="n">alphabet</span> <span class="o">=</span> <span class="s">"abcdefghijklmnopqrstuvwxyz"</span>
<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">alphabet</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">alphabet</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">alphabet</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">alphabet</span><span class="p">:</span>
                <span class="n">flag</span> <span class="o">=</span> <span class="s">"nactf{"</span> <span class="o">+</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span> <span class="o">+</span> <span class="n">d</span> <span class="o">+</span> <span class="s">"}"</span>
                <span class="n">flag_hex</span> <span class="o">=</span> <span class="n">hexlify</span><span class="p">(</span><span class="n">flag</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">"utf-8"</span><span class="p">))</span>
                <span class="n">m</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">flag_hex</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
                <span class="n">m_enc</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>

                <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="n">m_enc</span><span class="p">)[</span><span class="mi">0</span><span class="p">:</span><span class="mi">10</span><span class="p">]</span> <span class="o">==</span> <span class="nb">str</span><span class="p">(</span><span class="n">cipher</span><span class="p">)[</span><span class="mi">0</span><span class="p">:</span><span class="mi">10</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">m_enc</span><span class="p">)</span>
</code></pre></div></div>

<p>After successfully running the script:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python3 rsa-1.py
  nactf{pkcs}
</code></pre></div></div>

<p>I wasnâ€™t able to get a full match when comparing the integer value of the ciphertext and the supposed plaintext; however, comparing a substring resulted in a probably valid flag which is actually the case.</p>

<hr />

<h2 id="flag--nactfpkcs">FLAG : <strong>nactf{pkcs}</strong></h2>
:ET